var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiClient.html",[0,0.143,1,2.133]],["body/classes/ApiClient.html",[0,0.166,1,3.201,2,2.783,3,0.383,4,0.383,5,0.336,6,3.19,7,0.431,8,0.995,9,6.097,10,5.442,11,4.915,12,4.915,13,4.818,14,4.818,15,1.345,16,4.915,17,4.818,18,1.421,19,4.915,20,1.609,21,0.031,22,0.89,23,0.624,24,1.068,25,2.783,26,4.56,27,3.807,28,0.972,29,3.807,30,2.035,31,1.299,32,3.544,33,3.807,34,3.807,35,3.807,36,2.404,37,3.807,38,0.383,39,3.593,40,4.56,41,4.915,42,0.336,43,3.807,44,3.807,45,2.909,46,3.807,47,3.807,48,3.807,49,3.807,50,3.807,51,1.345,52,3.807,53,3.593,54,3.807,55,0.022,56,0.022]],["title/injectables/ApiProvider.html",[57,0.459,58,2.394]],["body/injectables/ApiProvider.html",[0,0.181,3,0.416,4,0.416,5,0.365,7,0.468,8,1.048,15,1.461,18,1.35,20,1.449,21,0.031,22,0.801,23,0.596,24,0.962,28,0.917,31,0.987,36,2.533,38,0.521,42,0.365,55,0.024,56,0.024,57,0.726,58,3.786,59,1.461,60,3.463,61,1.998,62,5.655,63,1.236,64,1.582,65,5.179,66,5.179,67,5.179,68,3.022,69,5.179,70,4.134,71,4.134,72,1.339,73,0.416,74,3.786,75,4.134,76,3.042,77,5.179,78,2.429,79,1.58,80,4.134,81,3.463,82,1.58,83,4.134,84,3.463,85,0.91,86,1.14,87,1.351,88,4.134,89,1.069]],["title/controllers/AppController.html",[90,1.924,91,2.133]],["body/controllers/AppController.html",[0,0.165,3,0.381,4,0.381,5,0.334,7,0.615,15,1.338,18,1.169,21,0.031,22,0.758,31,1.169,38,0.577,42,0.334,55,0.022,56,0.022,61,1.73,63,1.169,64,1.703,73,0.381,85,1.263,86,1.194,87,1.601,89,1.266,90,2.224,91,3.189,92,2.768,93,1.918,94,3.172,95,3.786,96,3.172,97,5.739,98,5.739,99,4.897,100,4.897,101,3.786,102,3.58,103,4.897,104,3.786,105,1.145,106,2.901,107,3.172,108,3.189,109,2.768,110,3.189,111,2.224,112,2.395,113,3.786,114,1.872,115,3.786,116,3.786,117,4.103,118,5.428,119,3.786,120,3.786,121,3.786,122,3.786,123,3.786,124,3.786,125,3.786,126,4.897,127,2.224,128,2.027,129,3.786,130,3.172,131,4.897,132,3.786,133,1.852]],["title/modules/AppModule.html",[134,0.608,135,2.133]],["body/modules/AppModule.html",[0,0.165,3,0.379,4,0.379,5,0.333,21,0.031,38,0.631,42,0.333,55,0.022,56,0.022,73,0.379,91,3.528,92,3.571,93,1.333,106,3.25,107,3.16,109,3.571,111,2.216,112,1.845,134,1.006,135,4.085,136,1.695,137,2.216,138,2.757,139,2.757,140,2.216,141,1.733,142,1.695,143,3.16,144,3.16,145,3.16,146,3.487,147,3.571,148,2.216,149,2.757,150,3.772,151,3.181,152,3.772,153,2.016,154,2.802,155,3.772,156,2.87,157,3.181,158,1.192,159,2.757,160,3.772,161,1.873,162,3.772,163,2.456,164,3.772,165,3.772,166,3.772,167,1.845,168,3.16,169,2.757,170,1.333,171,1.845,172,1.914,173,1.845,174,3.772,175,2.016,176,2.016,177,3.772,178,1.562]],["title/injectables/AppService.html",[57,0.459,106,1.75]],["body/injectables/AppService.html",[0,0.206,3,0.474,4,0.474,5,0.416,7,0.533,18,1.125,21,0.031,23,0.474,28,0.729,31,1.125,36,2.304,38,0.474,42,0.416,55,0.026,56,0.026,57,0.787,59,1.665,63,1.339,73,0.474,89,1.218,93,1.982,106,2.998,128,2.322,130,3.947,179,3.947,180,6.2,181,4.711,182,3.068]],["title/injectables/BaseWorker.html",[57,0.459,183,1.75]],["body/injectables/BaseWorker.html",[0,0.135,3,0.147,4,0.147,5,0.129,7,0.166,8,0.625,15,0.855,18,1.342,20,1.111,21,0.031,22,0.614,23,0.532,24,0.737,28,0.614,31,1.079,32,0.954,38,0.361,42,0.214,45,1.293,51,2.064,55,0.011,56,0.014,57,0.339,59,0.518,61,2.224,63,0.578,64,1.531,72,1.222,73,0.147,78,1.422,79,1.371,85,1.078,86,0.532,87,1.76,89,1.105,114,2.172,127,0.861,128,2.09,170,0.855,183,1.293,184,1.071,185,2.259,186,2.396,187,2.259,188,2.259,189,2.945,190,1.754,191,2.656,192,1.279,193,2.012,194,2.012,195,2.622,196,2.336,197,2.027,198,2.284,199,1.576,200,2.622,201,2.027,202,2.027,203,1.466,204,1.769,205,2.622,206,2.312,207,2.259,208,2.945,209,3.038,210,2.259,211,2.259,212,2.42,213,1.466,214,1.466,215,1.576,216,2.526,217,1.466,218,1.466,219,1.576,220,2.526,221,1.466,222,1.769,223,2.945,224,1.466,225,2.027,226,2.027,227,1.718,228,1.002,229,2.122,230,2.012,231,1.769,232,1.466,233,0.791,234,1.769,235,2.122,236,1.754,237,1.917,238,1.466,239,1.466,240,1.576,241,1.466,242,1.576,243,1.576,244,1.466,245,1.466,246,1.612,247,1.466,248,1.466,249,0.717,250,1.769,251,0.954,252,0.56,253,0.861,254,0.323,255,0.659,256,3.005,257,3.96,258,0.607,259,0.783,260,1.071,261,1.183,262,1.071,263,4.302,264,2.902,265,4.408,266,3.191,267,0.607,268,0.954,269,1.071,270,1.576,271,1.071,272,3.005,273,2.622,274,1.071,275,1.228,276,2.531,277,3.788,278,1.754,279,2.027,280,1.228,281,0.954,282,2.332,283,2.027,284,1.228,285,1.769,286,1.071,287,2.585,288,1.769,289,1.071,290,1.071,291,1.228,292,1.228,293,3.581,294,2.027,295,1.228,296,1.228,297,1.092,298,2.032,299,1.071,300,1.769,301,0.954,302,1.071,303,1.228,304,1.228,305,1.228,306,2.589,307,1.769,308,1.769,309,1.071,310,1.769,311,1.769,312,1.576,313,2.027,314,1.769,315,0.659,316,3.005,317,0.861,318,1.228,319,0.861,320,0.954,321,2.589,322,1.228,323,1.228,324,0.954,325,1.754,326,0.954,327,1.228,328,1.228,329,1.071,330,1.228,331,1.228,332,1.769,333,2.259,334,1.071,335,1.071,336,1.228,337,1.228,338,1.228,339,1.228,340,1.228,341,1.228,342,2.027,343,1.422,344,1.228,345,1.228,346,3.005,347,2.589,348,0.783,349,2.027,350,1.071,351,2.027,352,1.228,353,1.228,354,1.228,355,1.071,356,0.954,357,1.228,358,1.228,359,2.027,360,2.259,361,1.769,362,1.228,363,1.228,364,1.228,365,1.228,366,1.071,367,1.071,368,1.071,369,0.954,370,0.954,371,1.228,372,1.071,373,1.228,374,1.228,375,1.228,376,1.228,377,1.071,378,1.071,379,1.071,380,1.228,381,1.228,382,1.228,383,1.228,384,1.228,385,1.228,386,1.228,387,0.954,388,1.228,389,1.228,390,1.228,391,1.228,392,1.228]],["title/interfaces/BatchItem.html",[220,1.75,254,0.721]],["body/interfaces/BatchItem.html",[0,0.123,3,0.178,4,0.178,5,0.157,7,0.201,8,0.712,15,0.627,21,0.031,23,0.284,28,0.437,38,0.403,42,0.249,45,1.51,51,2.138,55,0.013,56,0.016,57,0.396,61,2.051,64,1.306,72,1.038,73,0.178,78,1.659,79,1.345,85,1.153,86,0.964,87,1.851,89,1.207,114,2.002,127,1.042,128,2.345,170,0.998,183,0.948,184,1.297,185,1.297,186,2.283,187,1.297,188,1.297,189,2.292,190,1.381,191,2.068,192,0.734,193,1.155,194,1.155,195,1.297,196,1.155,198,1.881,200,2.065,204,1.457,205,2.065,206,1.381,207,1.297,208,2.854,209,3.067,210,1.297,211,1.297,215,1.155,216,2.145,219,1.155,220,2.342,222,1.297,223,2.854,225,1.486,226,1.486,227,1.756,228,0.734,229,2.145,230,1.155,231,1.297,233,0.58,234,1.297,235,1.881,240,1.155,242,1.155,243,1.155,246,1.581,249,0.867,250,1.933,251,1.155,252,0.678,253,1.042,254,0.39,255,0.797,256,3.362,257,4.258,258,0.734,259,0.948,260,1.297,261,1.381,262,1.297,263,4.45,264,3.203,265,4.538,266,3.411,267,0.734,268,1.155,269,1.297,270,1.839,271,1.297,272,3.362,273,2.934,274,1.297,275,1.486,276,2.681,277,4.102,278,1.963,279,2.366,280,1.486,281,1.155,282,2.574,283,2.366,284,1.486,285,2.065,286,1.297,287,2.854,288,2.065,289,1.297,290,1.297,291,1.486,292,1.486,293,3.911,294,2.366,295,1.486,296,1.486,297,1.244,298,2.2,299,1.297,300,2.065,301,1.155,302,1.297,303,1.486,304,1.486,305,1.486,306,2.949,307,2.065,308,2.065,309,1.297,310,2.065,311,2.065,312,1.839,313,2.366,314,2.065,315,0.797,316,3.362,317,1.042,318,1.486,319,1.042,320,1.155,321,2.949,322,1.486,323,1.486,324,1.155,325,1.963,326,1.155,327,1.486,328,1.486,329,1.297,330,1.486,331,1.486,332,2.065,333,2.573,334,1.297,335,1.297,336,1.486,337,1.486,338,1.486,339,1.486,340,1.486,341,1.486,342,2.366,343,1.659,344,1.486,345,1.486,346,3.362,347,2.949,348,0.948,349,2.366,350,1.297,351,2.366,352,1.486,353,1.486,354,1.486,355,1.297,356,1.155,357,1.486,358,1.486,359,2.366,360,2.573,361,2.065,362,1.486,363,1.486,364,1.486,365,1.486,366,1.297,367,1.297,368,1.297,369,1.155,370,1.155,371,1.486,372,1.297,373,1.486,374,1.486,375,1.486,376,1.486,377,1.297,378,1.297,379,1.297,380,1.486,381,1.486,382,1.486,383,1.486,384,1.486,385,1.486,386,1.486,387,1.155,388,1.486,389,1.486,390,1.486,391,1.486,392,1.486,393,0.797]],["title/injectables/BeneficiaryApiProvider.html",[57,0.459,394,2.133]],["body/injectables/BeneficiaryApiProvider.html",[0,0.153,3,0.352,4,0.352,5,0.309,7,0.396,8,0.941,15,1.236,18,1.422,20,1.461,21,0.031,22,0.808,23,0.582,24,0.97,26,4.99,28,0.861,31,1.247,38,0.559,39,3.399,42,0.309,51,1.236,55,0.021,56,0.021,57,0.652,59,1.236,61,1.966,63,1.11,64,1.748,72,1.572,73,0.352,76,2.055,84,2.931,85,0.77,86,1.149,87,1.707,89,1.35,93,2.148,105,1.058,111,2.055,112,1.711,114,2.127,182,2.278,255,1.572,394,3.028,395,2.931,396,2.554,397,2.722,398,2.274,399,2.274,400,3.498,401,4.65,402,1.643,403,3.498,404,4.65,405,4.11,406,3.498,407,4.65,408,3.498,409,2.274,410,1.448,411,3.498,412,2.278,413,1.777,414,3.498,415,3.498,416,3.498,417,2.931,418,2.931,419,2.931,420,3.498,421,3.498,422,3.498,423,1.572,424,3.498,425,4.65]],["title/injectables/BeneficiaryPrismaProvider.html",[57,0.459,426,2.394]],["body/injectables/BeneficiaryPrismaProvider.html",[0,0.167,3,0.385,4,0.385,5,0.338,7,0.434,8,0.998,15,1.353,18,1.424,20,1.38,21,0.031,22,0.763,23,0.6,24,0.916,28,0.592,31,0.914,38,0.579,42,0.338,51,1.353,55,0.023,56,0.023,57,0.692,59,1.353,61,1.353,63,1.178,64,1.527,72,1.411,73,0.385,85,0.843,86,0.843,87,1.252,89,0.99,93,2.157,102,2.799,105,1.158,111,2.898,112,2.412,114,1.464,158,1.268,159,2.799,233,1.252,235,2.047,255,1.72,268,2.494,396,2.669,397,2.669,398,2.669,399,2.669,410,2.259,413,1.885,426,3.606,427,3.208,428,3.829,429,3.829,430,3.989,431,4.933,432,3.829,433,2.636,434,3.829,435,3.829,436,3.829,437,1.72,438,3.829,439,3.829,440,3.829,441,3.829,442,3.829,443,2.047,444,4.572,445,3.208,446,3.829]],["title/injectables/BeneficiaryWorker.html",[57,0.459,154,1.602]],["body/injectables/BeneficiaryWorker.html",[0,0.112,3,0.257,4,0.257,5,0.226,7,0.29,8,0.757,15,1.321,18,1.364,20,0.716,21,0.031,22,0.396,23,0.488,24,0.476,31,0.893,38,0.488,42,0.226,45,2.596,55,0.017,56,0.017,57,0.525,59,0.905,61,2.256,63,0.893,64,1.656,73,0.257,79,1.688,85,1.137,86,0.823,87,1.821,105,0.774,114,1.975,127,1.504,128,2.011,148,1.504,154,1.829,186,2.527,190,2.376,199,3.163,204,2.307,206,1.252,209,3.301,216,2.596,227,1.046,229,3.243,230,1.668,233,0.837,236,2.376,237,2.596,246,1.151,249,1.252,250,2.011,251,1.668,255,1.151,270,1.668,276,1.829,278,1.829,282,2.197,297,0.905,298,2.321,301,1.668,312,2.877,319,2.197,324,1.668,325,1.829,326,1.668,329,2.734,343,2.854,356,1.668,367,1.872,369,1.668,370,1.668,387,1.668,405,2.435,447,2.145,448,3.229,449,3.514,450,1.872,451,3.551,452,3.74,453,1.561,454,2.561,455,2.561,456,2.561,457,2.561,458,3.74,459,2.561,460,2.561,461,1.68,462,3.229,463,0.905,464,0.905,465,1.369,466,2.561,467,4.417,468,2.561,469,2.145,470,1.872,471,1.872,472,1.668,473,2.145,474,2.145,475,2.561,476,2.561,477,4.417,478,2.561,479,2.561,480,2.561,481,2.561,482,2.561,483,2.561,484,2.561,485,4.417,486,4.417,487,3.74,488,2.561,489,3.133,490,3.133,491,2.561,492,2.561,493,2.561,494,3.74,495,2.561,496,2.561,497,2.561,498,2.561,499,2.561,500,2.561,501,2.145,502,3.133,503,2.561,504,2.561,505,1.872,506,4.417,507,2.145,508,3.229,509,3.74,510,2.561,511,2.145,512,1.668,513,2.145,514,2.561,515,1.872,516,2.145,517,2.145,518,2.561]],["title/injectables/BeneficiaryWorker-1.html",[57,0.385,133,1.343,154,1.343]],["body/injectables/BeneficiaryWorker-1.html",[0,0.098,3,0.225,4,0.225,5,0.198,7,0.254,8,0.685,15,1.197,18,1.482,20,1.367,21,0.031,22,0.795,23,0.593,24,0.907,28,0.704,31,1.311,32,1.459,38,0.517,42,0.198,55,0.015,56,0.015,57,0.475,59,0.792,61,2.294,63,0.808,64,1.701,72,1.263,73,0.225,78,1.316,79,1.294,82,0.856,85,0.745,86,0.898,87,1.679,93,1.608,105,0.678,108,2.658,109,1.638,111,1.316,112,1.096,114,2.304,117,1.877,154,1.656,156,1.316,158,1.001,159,1.638,183,3.318,185,2.475,186,2.225,187,2.475,188,2.475,189,3.181,190,1.656,191,1.99,192,1.402,193,2.205,194,2.205,195,2.984,196,2.658,197,2.837,198,2.182,199,2.205,201,2.837,202,2.837,204,2.274,206,2.225,209,2.851,215,1.459,216,2.432,219,1.459,220,2.432,227,0.947,229,1.198,231,1.638,233,0.732,234,1.638,235,1.81,236,2.225,237,2.432,240,1.459,242,1.459,243,1.459,246,1.007,250,0.928,252,1.56,260,1.638,261,1.656,266,1.459,276,1.996,278,1.656,298,1.007,325,1.656,326,1.459,369,1.459,370,1.459,372,1.638,402,1.442,405,2.658,409,1.996,412,1.459,413,0.856,417,1.877,430,2.984,437,1.007,444,1.877,445,1.877,449,2.963,450,1.638,451,3.326,453,1.608,461,1.522,462,3.756,463,0.792,464,0.792,470,1.638,471,1.638,472,1.459,489,2.837,490,2.837,501,1.877,505,1.638,512,1.459,519,1.877,520,1.656,521,3.42,522,3.386,523,2.241,524,3.386,525,6.081,526,2.241,527,2.241,528,2.241,529,2.241,530,2.241,531,2.241,532,2.241,533,2.241,534,2.241,535,2.241,536,2.241,537,2.241,538,2.241,539,2.241,540,2.241,541,1.096,542,1.638,543,2.241,544,2.241,545,2.241,546,2.241,547,1.877,548,1.877,549,2.241,550,2.241,551,1.877,552,2.241,553,1.877,554,2.241,555,2.241,556,3.386,557,2.241,558,2.241,559,2.241,560,2.241,561,2.241,562,2.241,563,2.241,564,2.241,565,2.241,566,2.241,567,1.877,568,2.241,569,1.877]],["title/modules/DataProviderModule.html",[134,0.608,570,1.924]],["body/modules/DataProviderModule.html",[0,0.165,3,0.38,4,0.38,5,0.334,18,0.902,20,1.057,21,0.031,22,0.585,23,0.545,24,0.702,25,3.575,28,0.887,31,0.902,36,2.392,38,0.492,42,0.506,55,0.022,56,0.022,63,0.902,73,0.38,82,1.444,85,1.307,89,0.977,134,1.007,136,1.698,141,1.479,142,1.698,158,0.832,161,1.874,163,3.185,172,1.335,192,2.025,258,2.025,267,1.565,394,2.461,402,1.335,437,2.577,461,2.198,541,2.804,570,3.186,571,2.763,572,2.873,573,3.779,574,5.734,575,3.779,576,3.166,577,2.073,578,3.779,579,2.025,580,2.763,581,3.185,582,4.192,583,5.734,584,2.763,585,5.423,586,4.805,587,5.423,588,4.891,589,3.779,590,3.779]],["title/interfaces/GlobalDataProviderConfig.html",[254,0.721,591,2.133]],["body/interfaces/GlobalDataProviderConfig.html",[0,0.173,3,0.279,4,0.279,5,0.245,7,0.314,8,0.802,21,0.031,23,0.465,24,1.03,28,0.715,30,2.087,38,0.536,42,0.245,55,0.018,56,0.018,68,2.028,73,0.279,76,1.63,82,2.231,85,1.378,86,0.872,89,1.304,105,0.839,133,1.357,134,0.99,141,1.199,142,1.781,151,1.807,153,2.118,158,1.284,161,1.511,169,3.379,170,1.4,172,0.98,182,1.807,192,1.149,227,1.551,228,1.149,235,2.695,253,1.63,254,0.611,320,1.807,348,1.483,393,1.247,402,2.063,423,1.247,437,1.247,443,1.483,461,1.247,541,1.357,570,2.328,577,2.038,579,1.149,580,2.028,581,2.581,584,2.897,591,3.01,592,2.028,593,3.32,594,3.32,595,2.028,596,1.641,597,1.515,598,1.515,599,1.63,600,2.325,601,2.325,602,2.325,603,2.028,604,2.325,605,4.783,606,2.325,607,2.028,608,3.32,609,3.32,610,3.32,611,3.873,612,3.873,613,1.357,614,3.32,615,2.325,616,2.325,617,1.807,618,3.873,619,2.325,620,2.325,621,2.325,622,3.873,623,2.325,624,2.325,625,4.224,626,2.325,627,2.325,628,4.224,629,2.325,630,2.325,631,4.224,632,3.32,633,3.32,634,2.325,635,2.028,636,3.873,637,2.325,638,3.873,639,1.781,640,3.32,641,3.32,642,2.325,643,3.32,644,2.325,645,1.807]],["title/interfaces/IDataProvider.html",[254,0.721,413,1.252]],["body/interfaces/IDataProvider.html",[0,0.228,3,0.3,4,0.3,5,0.264,7,0.338,8,0.845,21,0.031,22,0.646,23,0.637,28,0.947,30,1.729,38,0.42,42,0.525,51,1.056,55,0.019,56,0.019,72,1.538,73,0.3,82,1.142,86,0.919,105,1.658,134,0.555,141,0.904,158,0.919,161,1.703,167,2.042,170,1.056,171,1.461,172,1.841,173,1.461,175,2.232,176,2.232,178,1.729,227,1.631,228,1.237,233,0.977,252,1.142,254,1.207,258,1.729,267,1.237,297,1.475,315,1.342,393,1.342,396,2.548,397,2.548,398,2.548,399,2.548,402,1.701,409,1.461,410,2.502,413,1.596,423,1.342,433,1.597,453,1.056,463,1.475,464,1.056,465,1.597,520,1.461,577,1.992,579,2.157,596,1.237,597,1.596,598,1.596,613,1.461,639,2.463,646,1.461,647,2.785,648,2.453,649,2.828,650,2.042,651,2.453,652,2.453,653,2.453,654,1.755,655,1.755,656,1.755,657,1.755,658,1.461,659,1.755,660,2.232,661,1.597,662,1.755,663,2.453,664,2.828,665,2.453,666,2.453,667,2.453,668,2.453,669,2.785,670,1.755,671,1.755,672,1.755,673,2.354,674,1.597,675,2.042,676,1.342,677,1.755]],["title/modules/PrismaModule.html",[134,0.608,678,2.133]],["body/modules/PrismaModule.html",[0,0.198,3,0.456,4,0.456,5,0.4,21,0.03,38,0.551,42,0.4,55,0.025,56,0.025,73,0.456,93,1.601,134,1.094,136,2.036,137,2.662,138,3.313,139,3.313,140,2.662,141,1.782,142,2.647,147,4.006,148,2.662,149,3.313,158,1.461,461,2.462,678,4.196,679,3.797,680,3.797,681,3.797,682,4.532,683,4.532]],["title/injectables/PrismaService.html",[57,0.459,158,0.721]],["body/injectables/PrismaService.html",[0,0.179,3,0.411,4,0.411,5,0.361,7,0.463,15,1.989,18,1.41,21,0.031,31,1.344,38,0.517,42,0.361,55,0.024,56,0.024,57,0.722,59,1.446,63,1.228,64,1.8,73,0.411,76,2.404,87,1.682,89,1.331,93,2.15,102,2.991,158,1.132,198,3.32,255,1.839,412,2.665,449,4.045,520,2.516,551,3.428,617,2.665,684,3.428,685,5.629,686,5.906,687,4.092,688,4.092,689,4.092,690,4.092,691,4.092,692,4.092,693,4.092,694,4.092,695,4.092,696,4.092,697,4.092,698,4.092,699,4.092]],["title/interfaces/QueueDefinition.html",[254,0.721,675,1.602]],["body/interfaces/QueueDefinition.html",[0,0.228,3,0.303,4,0.303,5,0.266,7,0.341,8,0.849,21,0.031,22,0.851,23,0.633,24,0.779,28,0.967,30,1.737,38,0.422,42,0.526,51,1.063,55,0.019,56,0.019,72,1.541,73,0.303,82,1.15,86,0.924,105,1.663,134,0.559,141,0.91,158,0.924,161,1.709,167,2.052,170,1.063,171,1.472,172,1.847,173,1.472,175,2.243,176,2.243,178,1.737,227,1.635,228,1.246,233,0.984,252,1.15,254,1.21,258,1.737,267,1.246,297,1.943,315,1.352,393,1.352,396,1.472,397,1.472,398,1.472,399,1.472,402,1.707,409,1.472,410,1.246,413,1.15,423,1.352,433,1.609,453,1.063,463,1.483,464,1.063,465,1.609,520,1.472,577,1.998,579,2.164,596,1.246,597,1.604,598,1.604,613,1.472,639,2.47,646,1.472,647,2.794,648,2.466,649,3.23,650,2.689,651,3.071,652,2.466,653,2.466,654,1.768,655,1.768,656,1.768,657,1.768,658,1.472,659,1.768,660,2.243,661,1.609,662,1.768,663,2.466,664,2.839,665,2.466,666,2.466,667,2.466,668,2.466,669,2.794,670,1.768,671,1.768,672,1.768,673,2.363,674,1.609,675,2.363,676,1.352,677,1.768]],["title/injectables/QueueUtilsService.html",[57,0.459,204,1.356]],["body/injectables/QueueUtilsService.html",[0,0.121,3,0.278,4,0.278,5,0.244,7,0.313,8,0.801,18,1.272,20,1.55,21,0.031,22,0.779,23,0.557,24,1.029,31,1.202,32,3.608,38,0.398,42,0.244,45,2.114,55,0.018,56,0.018,57,0.555,59,0.978,61,1.631,63,0.944,64,1.723,72,1.558,73,0.278,79,1.512,85,0.87,87,1.509,114,1.764,128,2.205,186,2.981,190,2.463,199,2.576,204,1.637,206,2.605,208,1.802,223,4.125,229,2.114,230,3.715,233,2.013,236,1.934,237,2.114,246,2.074,249,1.353,276,2.981,278,2.463,281,1.802,282,3.351,298,1.777,317,1.626,319,2.324,325,2.463,343,2.324,387,1.802,410,2.085,502,3.314,512,1.802,515,2.023,576,2.318,700,4.642,701,2.318,702,4.615,703,3.955,704,3.955,705,3.955,706,5.541,707,2.767,708,2.767,709,3.867,710,4.219,711,2.767,712,3.955,713,5.704,714,2.767,715,3.955,716,2.767,717,3.955,718,2.767,719,2.318,720,3.955,721,4.219,722,2.318,723,3.314,724,2.767,725,2.767,726,2.767,727,2.767,728,2.023,729,2.767,730,3.955,731,2.318,732,2.767,733,2.767,734,2.318,735,2.767]],["title/modules/RabbitMQModule.html",[134,0.608,146,1.924]],["body/modules/RabbitMQModule.html",[0,0.141,3,0.325,4,0.325,5,0.285,18,1.346,20,0.904,21,0.031,22,0.5,23,0.504,24,0.6,31,1.197,38,0.585,42,0.285,55,0.02,56,0.02,63,0.771,64,1.507,72,0.835,73,0.325,85,1.311,89,0.835,90,1.898,92,3.221,110,2.947,133,1.58,134,1.126,136,1.452,141,1.517,142,2.253,146,2.947,151,2.87,153,1.727,156,1.898,161,1.44,163,2.104,167,1.58,192,1.824,198,3.014,204,2.076,227,0.904,236,2.155,240,2.104,250,1.337,251,2.104,253,1.898,255,1.452,258,1.337,259,1.727,324,2.104,348,1.727,443,1.727,449,3.672,453,1.142,461,1.98,463,1.772,464,1.142,572,1.898,577,2.059,579,1.337,603,2.362,635,2.362,639,1.452,645,2.104,647,2.355,650,1.58,676,2.421,736,3.231,737,3.231,738,3.231,739,4.407,740,3.231,741,3.231,742,3.231,743,5.015,744,3.231,745,3.231,746,3.231,747,5.387,748,5.638,749,2.707,750,3.231,751,3.231,752,4.407,753,3.231,754,3.231,755,3.231,756,3.231,757,4.407,758,3.231,759,4.407,760,4.407,761,3.231,762,4.407,763,4.407,764,3.231,765,2.707,766,4.407,767,4.407,768,3.231,769,4.407,770,3.231]],["title/interfaces/RabbitMQRegisterOptions.html",[254,0.721,676,1.471]],["body/interfaces/RabbitMQRegisterOptions.html",[0,0.223,3,0.286,4,0.286,5,0.251,7,0.322,8,0.816,21,0.031,22,0.623,23,0.645,24,1.038,28,0.972,30,1.668,38,0.405,42,0.519,51,1.004,55,0.018,56,0.018,72,1.585,73,0.286,82,1.086,86,0.887,105,1.627,134,0.748,141,0.859,158,0.887,161,1.666,167,2.631,170,1.424,171,1.389,172,1.801,173,1.389,175,2.876,176,2.876,178,2.228,227,1.608,228,1.176,233,0.929,252,1.086,254,1.184,258,1.668,267,1.176,297,1.424,315,1.811,393,1.276,396,1.389,397,1.389,398,1.389,399,1.389,402,1.655,409,1.389,410,1.176,413,1.086,423,1.276,433,1.518,453,1.004,463,1.424,464,1.004,465,1.518,520,1.971,577,2.197,579,2.11,596,1.176,597,1.54,598,1.54,613,1.389,639,2.418,646,1.389,647,3.072,648,2.751,649,2.751,650,1.971,651,2.368,652,3.161,653,2.994,654,1.669,655,1.669,656,1.669,657,1.669,658,1.389,659,1.669,660,2.154,661,1.518,662,1.669,663,2.368,664,2.751,665,2.368,666,2.368,667,2.368,668,2.368,669,2.724,670,1.669,671,1.669,672,1.669,673,2.29,674,1.518,675,2.492,676,1.811,677,2.368]],["title/injectables/RabbitMQService.html",[57,0.459,110,1.924]],["body/injectables/RabbitMQService.html",[0,0.127,3,0.291,4,0.291,5,0.256,7,0.328,8,0.827,15,1.444,18,1.294,20,1.324,21,0.031,22,0.732,23,0.517,24,0.879,28,0.87,31,0.976,38,0.476,42,0.256,55,0.019,56,0.019,57,0.573,59,1.024,61,2.086,63,0.976,64,1.617,72,1.329,73,0.291,78,1.702,79,1.562,85,0.899,86,0.638,87,1.547,105,0.876,110,2.401,112,1.417,114,2.072,128,2.244,157,3.083,178,1.2,186,2.315,190,2.514,206,1.999,209,2.53,216,2.184,236,1.999,237,2.184,246,1.302,249,1.417,250,2.663,261,1.999,266,1.887,269,2.987,276,2.827,278,1.999,297,1.024,298,2.127,312,1.887,317,1.702,325,2.315,361,3.963,377,2.987,448,3.963,450,2.118,451,3.758,453,1.673,461,1.836,462,4.112,463,1.024,464,1.024,469,2.428,470,2.118,471,2.118,472,3.083,507,3.424,508,3.963,516,2.428,521,3.966,547,2.428,553,2.428,728,2.118,731,2.428,771,2.428,772,4.087,773,4.087,774,4.087,775,4.087,776,2.898,777,4.087,778,2.898,779,4.087,780,2.898,781,2.898,782,2.898,783,2.898,784,2.898,785,2.428,786,2.898,787,2.898,788,2.898,789,2.898,790,4.734,791,2.898,792,2.428,793,2.898,794,2.898,795,2.898,796,2.898,797,2.898,798,2.428,799,2.898,800,2.898,801,2.428,802,2.898,803,2.428,804,2.898,805,2.898,806,2.898,807,2.898]],["title/interfaces/WorkerClassDefinition.html",[254,0.721,597,1.252]],["body/interfaces/WorkerClassDefinition.html",[0,0.244,3,0.284,4,0.284,5,0.25,7,0.32,8,0.813,21,0.031,22,0.622,23,0.647,24,1.124,28,0.957,30,1.934,38,0.404,42,0.518,51,1,55,0.018,56,0.018,72,1.517,73,0.284,82,1.081,86,0.884,105,1.774,134,0.525,141,0.856,158,1.182,161,1.918,167,1.965,170,1,171,1.965,172,2.073,173,1.384,175,2.147,176,2.147,178,1.663,227,1.641,228,1.663,233,0.925,252,1.081,254,1.182,258,1.934,267,1.171,297,1.42,315,1.271,393,1.271,396,1.384,397,1.384,398,1.384,399,1.384,402,1.972,409,1.384,410,1.171,413,1.081,423,1.271,433,1.512,453,1,463,1.42,464,1,465,1.512,520,1.384,577,1.944,579,2.224,596,1.171,597,1.786,598,1.536,613,1.384,639,2.636,646,1.384,647,2.719,648,2.36,649,2.745,650,1.965,651,2.36,652,2.36,653,2.36,654,1.662,655,1.662,656,1.662,657,1.662,658,1.384,659,1.662,660,2.497,661,2.147,662,1.662,663,2.36,664,3.373,665,2.36,666,2.36,667,2.36,668,3.156,669,2.719,670,1.662,671,1.662,672,1.662,673,2.285,674,1.512,675,1.965,676,1.271,677,1.662,808,2.37]],["title/interfaces/WorkerFactoryDefinition.html",[254,0.721,598,1.252]],["body/interfaces/WorkerFactoryDefinition.html",[0,0.222,3,0.283,4,0.283,5,0.248,7,0.319,8,0.81,21,0.031,22,0.619,23,0.641,24,1.123,28,0.956,30,1.928,38,0.402,42,0.517,51,0.994,55,0.018,56,0.018,72,1.515,73,0.283,82,1.075,86,0.881,105,1.828,134,0.522,141,0.851,158,1.18,161,1.915,167,1.957,170,0.994,171,1.376,172,2.025,173,1.957,175,2.139,176,2.139,178,1.657,227,1.668,228,1.165,233,0.92,252,1.075,254,1.18,258,1.928,267,1.657,297,1.414,315,1.264,393,1.264,396,1.376,397,1.376,398,1.376,399,1.376,402,1.969,409,1.376,410,2.101,413,1.075,423,1.798,433,1.504,453,0.994,463,1.414,464,0.994,465,1.504,520,1.376,577,1.939,579,2.219,596,1.165,597,1.53,598,1.78,613,1.957,639,2.716,646,1.376,647,2.712,648,2.351,649,2.737,650,1.957,651,2.351,652,2.351,653,2.351,654,1.653,655,1.653,656,1.653,657,1.653,658,1.376,659,1.653,660,2.49,661,1.504,662,1.653,663,2.351,664,3.15,665,2.351,666,2.351,667,2.351,668,3.15,669,2.865,670,2.351,671,1.653,672,1.653,673,2.278,674,1.504,675,1.957,676,1.264,677,1.653,808,2.357]],["title/modules/WorkerModule.html",[134,0.608,153,1.75]],["body/modules/WorkerModule.html",[0,0.174,3,0.281,4,0.281,5,0.247,18,0.667,20,0.782,21,0.031,22,0.432,23,0.466,24,0.519,28,0.432,30,2.094,31,0.667,36,1.947,38,0.538,42,0.247,55,0.018,56,0.018,63,0.667,68,2.911,73,0.281,76,1.641,82,2.044,85,1.379,86,0.876,89,1.308,105,0.845,133,1.366,134,0.993,136,1.255,141,1.204,142,1.789,151,1.819,153,2.48,158,1.177,161,1.517,169,3.392,170,1.407,172,0.987,182,1.819,192,1.649,227,1.555,228,1.157,235,2.703,253,1.641,254,0.615,320,1.819,348,1.493,402,1.889,423,1.255,437,1.255,443,1.493,461,1.255,541,1.366,570,2.34,572,1.641,577,2.125,579,1.157,580,2.042,581,2.593,584,2.911,591,2.593,592,2.042,593,3.336,594,3.336,595,2.042,596,1.649,597,1.522,598,1.522,599,1.641,600,2.341,601,3.336,602,2.341,603,2.042,604,2.341,605,4.792,606,2.341,607,2.042,608,3.336,609,3.336,610,3.336,611,3.888,612,3.888,613,1.366,614,3.336,615,2.341,616,2.341,617,1.819,618,3.888,619,2.341,620,2.341,621,2.341,622,3.888,623,2.341,624,2.341,625,4.238,626,2.341,627,2.341,628,4.238,629,2.341,630,2.341,631,4.238,632,3.336,633,3.336,634,2.341,635,2.042,636,3.888,637,2.341,638,3.888,639,1.789,640,3.336,641,3.336,642,2.341,643,3.336,644,2.341,645,1.819,809,2.794,810,2.794]],["title/classes/WorkerTokensModule.html",[0,0.143,599,1.924]],["body/classes/WorkerTokensModule.html",[0,0.226,2,3.016,3,0.415,4,0.415,5,0.364,7,0.467,18,0.985,20,1.154,21,0.031,22,0.638,23,0.568,24,0.766,28,0.638,31,0.985,36,2.529,38,0.52,42,0.364,55,0.024,56,0.024,63,1.235,73,0.415,85,1.138,89,1.067,134,0.766,141,1.564,142,1.854,158,0.908,161,1.691,163,3.368,172,1.827,192,2.339,267,2.141,402,1.458,437,2.324,541,2.529,572,3.039,577,2.159,586,4.333,595,3.016,599,3.319,811,4.333,812,3.456,813,5.172,814,4.125,815,4.125,816,5.172,817,5.172,818,4.125,819,5.172,820,5.172,821,4.125,822,4.125,823,4.125]],["title/coverage.html",[824,3.727]],["body/coverage.html",[0,0.193,1,2.117,5,0.287,6,2.724,21,0.031,23,0.543,55,0.02,56,0.02,57,0.873,58,2.377,60,2.724,74,2.377,79,1.243,90,1.91,91,2.117,93,2.238,94,2.724,106,1.738,108,2.117,110,1.91,127,1.91,140,1.91,154,2.165,156,1.91,157,2.117,158,0.715,179,2.724,183,1.738,184,3.235,204,1.346,220,1.738,246,3,250,1.346,252,1.243,254,1.313,259,1.738,394,2.117,395,2.724,410,1.832,413,1.243,426,2.377,427,2.724,437,1.461,447,2.724,519,2.724,541,1.59,542,2.377,571,3.678,582,2.377,591,2.117,592,2.377,596,1.346,597,1.243,598,1.243,599,1.91,646,2.969,658,1.59,675,1.59,676,1.461,684,2.724,700,2.724,701,2.724,771,2.724,811,2.724,812,2.724,824,2.724,825,3.251,826,3.251,827,3.251,828,2.724,829,2.724,830,6.225,831,2.724,832,6.412,833,5.032,834,4.426,835,4.216,836,2.724,837,4.426,838,2.724,839,2.724,840,3.251,841,5.032,842,3.251,843,2.724,844,3.251,845,5.032,846,2.724,847,3.251,848,3.251,849,4.426,850,4.426,851,5.032,852,3.251,853,2.724,854,3.251,855,3.251,856,3.251]],["title/dependencies.html",[137,2.311,857,2.3]],["body/dependencies.html",[21,0.031,39,3.358,55,0.025,56,0.025,64,1.285,73,0.462,137,2.699,249,2.246,412,2.991,430,3.358,453,1.623,463,1.623,464,1.623,581,2.991,858,5.925,859,4.593,860,4.593,861,4.593,862,4.593,863,4.593,864,4.593,865,4.593,866,4.593,867,4.593,868,4.593,869,4.593,870,4.593,871,4.593,872,4.593,873,4.593,874,4.593,875,4.593,876,4.593,877,4.593,878,4.593,879,4.593,880,4.593,881,4.593,882,4.593,883,4.593,884,4.593]],["title/miscellaneous/functions.html",[885,1.467,886,3.295]],["body/miscellaneous/functions.html",[7,0.555,20,1.372,21,0.028,22,0.759,23,0.493,24,0.911,28,0.889,55,0.026,56,0.026,93,2.03,96,4.109,140,3.579,836,4.109,838,4.109,839,4.812,885,2.621,886,4.109,887,4.905,888,4.905,889,4.905,890,5.744,891,5.744]],["title/index.html",[7,0.311,892,2.746,893,2.746]],["body/index.html",[0,0.161,21,0.031,28,0.389,42,0.136,45,1.343,51,1.544,53,1.837,55,0.011,56,0.011,61,1.812,63,0.366,64,1.138,72,0.954,79,0.96,81,2.105,85,1.015,86,0.553,87,1.574,89,0.954,112,2.137,114,1.84,128,2.44,133,0.75,134,0.285,148,1.476,154,1.229,161,0.821,168,1.286,170,1.894,171,0.75,172,0.888,173,0.75,178,2.174,183,2.335,186,2.256,189,1.636,190,0.75,191,1.874,192,0.635,193,0.999,194,0.999,196,1.636,198,1.343,200,2.332,204,1.04,205,1.122,206,1.804,207,1.122,208,2.402,209,3.069,210,1.122,211,1.122,215,0.999,216,1.705,219,0.999,220,1.343,222,1.122,223,1.636,227,1.691,229,3.037,233,0.502,243,0.999,246,0.689,249,0.75,250,2.324,255,0.689,259,0.82,261,0.75,262,1.122,263,1.122,264,2.332,265,3.372,268,0.999,270,0.999,271,1.122,273,1.122,274,1.122,276,2.709,278,1.56,281,0.999,282,1.476,285,1.837,286,1.122,287,2.402,288,2.332,289,1.837,290,1.122,297,0.542,298,1.657,299,1.122,300,1.837,301,0.999,302,1.122,307,1.122,308,1.122,309,1.837,310,1.122,311,1.122,314,1.122,315,1.129,317,2.167,319,1.476,325,1.56,332,1.837,333,1.837,334,1.837,335,1.837,343,2.167,348,0.82,355,1.837,356,0.999,360,1.837,366,1.122,368,1.122,378,1.122,379,1.122,405,0.999,418,1.286,419,2.673,443,0.82,448,1.837,453,0.542,463,0.542,464,0.542,472,2.845,473,1.286,474,2.673,505,2.696,508,4.104,511,1.286,512,0.999,513,1.286,515,1.837,567,2.105,569,1.286,572,1.476,607,2.332,617,2.845,645,0.999,660,0.82,661,1.705,673,0.75,709,1.286,710,1.286,719,4.296,721,1.286,722,1.286,723,3.09,728,1.837,734,1.286,749,3.865,765,1.286,792,1.286,798,1.286,801,1.286,803,1.286,894,3.19,895,1.122,896,1.534,897,3.688,898,2.513,899,1.534,900,2.513,901,4.613,902,2.513,903,2.513,904,4.069,905,2.513,906,1.534,907,1.534,908,3.19,909,1.534,910,1.534,911,4.983,912,4.369,913,3.19,914,2.513,915,2.513,916,2.513,917,3.688,918,2.513,919,3.19,920,2.513,921,3.19,922,2.513,923,1.534,924,1.534,925,1.534,926,3.19,927,4.069,928,1.534,929,3.688,930,3.19,931,2.513,932,3.19,933,1.534,934,3.688,935,1.534,936,1.534,937,2.513,938,1.534,939,2.513,940,2.513,941,3.688,942,3.19,943,2.513,944,2.513,945,1.534,946,4.613,947,5.455,948,4.369,949,1.534,950,1.534,951,1.534,952,3.19,953,3.19,954,1.534,955,1.534,956,1.534,957,1.534,958,1.534,959,3.19,960,1.534,961,1.534,962,1.534,963,1.534,964,1.534,965,1.534,966,4.069,967,2.513,968,1.534,969,1.534,970,1.534,971,1.534,972,1.534,973,2.513,974,1.534,975,1.534,976,1.534,977,2.513,978,1.534,979,1.534,980,1.534,981,1.534,982,1.534,983,1.534,984,1.534,985,1.534,986,1.534,987,1.534,988,1.534,989,1.534,990,1.534,991,2.513,992,2.513,993,2.513,994,1.534,995,1.534,996,1.534,997,2.513,998,1.534,999,1.534,1000,1.534,1001,2.513,1002,1.534,1003,3.688,1004,1.534,1005,1.534,1006,1.534,1007,1.534,1008,1.534,1009,1.534,1010,1.534,1011,1.534,1012,1.534,1013,1.534,1014,1.534,1015,1.534,1016,3.19,1017,3.19,1018,1.534,1019,1.534,1020,2.513,1021,1.534,1022,3.19,1023,3.688,1024,1.534,1025,1.534,1026,1.534,1027,1.534,1028,1.534,1029,1.534,1030,1.534,1031,1.534,1032,1.534,1033,1.534,1034,1.534,1035,1.534,1036,1.534,1037,1.534,1038,1.534,1039,1.534,1040,1.534,1041,1.534,1042,2.513,1043,2.513,1044,2.513,1045,1.534,1046,1.534,1047,2.513,1048,2.513,1049,1.534,1050,1.534,1051,1.534,1052,1.534,1053,1.534,1054,1.534,1055,1.534,1056,1.534,1057,1.534,1058,1.534,1059,1.534,1060,1.534,1061,3.19,1062,1.534,1063,2.513,1064,1.534,1065,1.534,1066,1.534,1067,1.534,1068,1.534,1069,1.534,1070,1.534,1071,1.534,1072,1.534,1073,1.534,1074,1.534,1075,1.534,1076,1.534,1077,1.534,1078,1.534,1079,1.534,1080,1.534,1081,1.534,1082,1.534,1083,1.534,1084,1.534,1085,1.534,1086,1.534,1087,1.534,1088,1.534,1089,1.534,1090,1.534,1091,1.534,1092,1.534,1093,1.534,1094,1.534,1095,1.534,1096,1.534,1097,1.534,1098,1.534,1099,1.534]],["title/modules.html",[136,1.998]],["body/modules.html",[21,0.026,55,0.026,56,0.026,135,3.225,136,2.225,146,2.91,153,2.647,517,5.124,570,2.91,678,3.225,1100,5.777,1101,5.777,1102,5.777,1103,6.417,1104,6.116]],["title/overview.html",[895,3.251]],["body/overview.html",[2,3.35,21,0.029,55,0.025,56,0.025,59,1.619,90,2.692,106,3.164,133,2.241,134,0.851,135,4.158,136,2.059,137,2.692,138,3.35,139,3.35,140,2.692,141,1.386,142,2.059,143,3.84,144,3.84,145,3.84,146,3.478,147,4.033,148,2.692,149,3.35,158,1.421,259,2.449,261,2.241,393,2.059,443,2.449,678,4.094,679,3.84,680,3.84,681,3.84,895,3.35,1105,4.583]],["title/properties.html",[8,0.796,857,2.3]],["body/properties.html",[8,1.043,21,0.029,55,0.027,56,0.027,1106,5.154,1107,5.154,1108,5.154,1109,5.154]],["title/miscellaneous/typealiases.html",[885,1.467,1110,3.933]],["body/miscellaneous/typealiases.html",[0,0.214,7,0.554,21,0.028,23,0.631,36,2.805,55,0.026,56,0.026,227,1.369,252,2.192,596,2.375,597,1.87,598,1.87,646,2.393,658,2.805,669,2.615,673,2.805,674,2.615,885,2.615,1111,4.893,1112,6.085]],["title/miscellaneous/variables.html",[885,1.467,1113,3.295]],["body/miscellaneous/variables.html",[1,3.41,7,0.398,13,3.909,14,3.909,17,2.946,21,0.031,22,0.544,23,0.6,25,2.571,28,0.977,30,1.932,40,2.946,53,2.571,55,0.021,56,0.021,74,3.411,79,1.344,85,0.774,89,1.206,93,1.649,108,3.632,128,1.456,156,3.076,157,3.038,178,1.456,191,2.741,236,3.059,237,3.343,242,3.038,250,1.456,261,2.282,287,2.29,297,1.243,298,1.58,350,3.411,437,2.353,541,2.561,542,3.411,548,2.946,571,2.571,582,3.827,650,1.72,785,2.946,828,2.946,829,3.909,831,3.909,835,2.946,843,2.946,846,2.946,853,2.946,885,1.88,1113,2.946,1114,3.517,1115,5.236,1116,5.236,1117,3.517,1118,3.517,1119,3.517,1120,5.236,1121,3.517,1122,3.517,1123,4.666,1124,3.517,1125,3.517,1126,3.517,1127,3.517,1128,3.517,1129,3.517,1130,3.517,1131,3.517,1132,3.517,1133,3.517,1134,3.517,1135,3.517,1136,3.517,1137,3.517,1138,3.517,1139,3.517]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":246,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"coverage.html":{},"index.html":{}}}],["0.0.0",{"_index":1107,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["0.10.5",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["0.10.6",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["0.12.0",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":133,"title":{"injectables/BeneficiaryWorker-1.html":{}},"body":{"controllers/AppController.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"index.html":{},"overview.html":{}}}],["1.6.0",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["1/17",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":850,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":261,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["10.0.2",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"coverage.html":{}}}],["1000",{"_index":372,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["11.0.3",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":443,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"index.html":{},"overview.html":{}}}],["20",{"_index":329,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{}}}],["3",{"_index":348,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"index.html":{}}}],["30000",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":645,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"index.html":{}}}],["4.1.14",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":259,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"modules/RabbitMQModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["5.2.1",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["5000",{"_index":242,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":765,"title":{},"body":{"modules/RabbitMQModule.html":{},"index.html":{}}}],["6.1.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1105,"title":{},"body":{"overview.html":{}}}],["7.8.0",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.1.0",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["__teardown_message__",{"_index":831,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["_client",{"_index":62,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["abstract",{"_index":200,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["abstracting",{"_index":1053,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":11,"title":{},"body":{"classes/ApiClient.html":{}}}],["accesstoken",{"_index":12,"title":{},"body":{"classes/ApiClient.html":{}}}],["accesstoken(token",{"_index":46,"title":{},"body":{"classes/ApiClient.html":{}}}],["ack",{"_index":709,"title":{},"body":{"injectables/QueueUtilsService.html":{},"index.html":{}}}],["ack(item",{"_index":725,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["acknowledge",{"_index":356,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"index.html":{}}}],["acknowledged",{"_index":511,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"index.html":{}}}],["acknowledgemode",{"_index":207,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["acknowledges",{"_index":1030,"title":{},"body":{"index.html":{}}}],["acknowledging",{"_index":1070,"title":{},"body":{"index.html":{}}}],["acknowledgment",{"_index":723,"title":{},"body":{"injectables/QueueUtilsService.html":{},"index.html":{}}}],["acknowledgments",{"_index":961,"title":{},"body":{"index.html":{}}}],["actual",{"_index":228,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{}}}],["add",{"_index":937,"title":{},"body":{"index.html":{}}}],["adding",{"_index":944,"title":{},"body":{"index.html":{}}}],["alias",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":663,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["allows",{"_index":942,"title":{},"body":{"index.html":{}}}],["already",{"_index":318,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["always",{"_index":986,"title":{},"body":{"index.html":{}}}],["ampqprovidername",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["amqp",{"_index":463,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"dependencies.html":{},"index.html":{}}}],["amqp.amqpconnectionmanageroptions",{"_index":653,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["amqp.connect(options.urls",{"_index":745,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["amqp.options.assertqueue",{"_index":651,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["amqp_connection",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/RabbitMQModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["amqpconnection",{"_index":210,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["amqpconnectionmanager",{"_index":451,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["amqplib",{"_index":249,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"dependencies.html":{},"index.html":{}}}],["amqpprovider",{"_index":743,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["anything",{"_index":751,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["api",{"_index":182,"title":{},"body":{"injectables/AppService.html":{},"injectables/BeneficiaryApiProvider.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["api_url",{"_index":541,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiclient",{"_index":1,"title":{"classes/ApiClient.html":{}},"body":{"classes/ApiClient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiclient(config",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiclient.accesstoken",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiclient.appid",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiclient.headers",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiprovider",{"_index":58,"title":{"injectables/ApiProvider.html":{}},"body":{"injectables/ApiProvider.html":{},"coverage.html":{}}}],["apiurl",{"_index":402,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["app",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":91,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appid",{"_index":13,"title":{},"body":{"classes/ApiClient.html":{},"miscellaneous/variables.html":{}}}],["appid(appid",{"_index":49,"title":{},"body":{"classes/ApiClient.html":{}}}],["application",{"_index":900,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":135,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approach",{"_index":936,"title":{},"body":{"index.html":{}}}],["apps/.../constants.ts",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../global",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":887,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../swagger.ts",{"_index":888,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/nest",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["appservice",{"_index":106,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":1068,"title":{},"body":{"index.html":{}}}],["args",{"_index":671,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["argument",{"_index":978,"title":{},"body":{"index.html":{}}}],["arguments",{"_index":287,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array",{"_index":423,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{}}}],["array(10000",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["assert",{"_index":924,"title":{},"body":{"index.html":{}}}],["associated",{"_index":954,"title":{},"body":{"index.html":{}}}],["assuming",{"_index":422,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["async",{"_index":64,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"dependencies.html":{},"index.html":{}}}],["attempt",{"_index":373,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["automatic",{"_index":922,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":923,"title":{},"body":{"index.html":{}}}],["available",{"_index":517,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"modules.html":{}}}],["avoid",{"_index":357,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["await",{"_index":87,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["axios",{"_index":39,"title":{},"body":{"classes/ApiClient.html":{},"injectables/BeneficiaryApiProvider.html":{},"dependencies.html":{}}}],["axios.create",{"_index":416,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["axios.create(config",{"_index":44,"title":{},"body":{"classes/ApiClient.html":{}}}],["axiosheadervalue",{"_index":40,"title":{},"body":{"classes/ApiClient.html":{},"miscellaneous/variables.html":{}}}],["axiosinstance",{"_index":26,"title":{},"body":{"classes/ApiClient.html":{},"injectables/BeneficiaryApiProvider.html":{}}}],["backoff",{"_index":365,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["base",{"_index":1018,"title":{},"body":{"index.html":{}}}],["based",{"_index":673,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["baseurl",{"_index":84,"title":{},"body":{"injectables/ApiProvider.html":{},"injectables/BeneficiaryApiProvider.html":{}}}],["baseworker",{"_index":183,"title":{"injectables/BaseWorker.html":{}},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"coverage.html":{},"index.html":{}}}],["baseworker.workercount",{"_index":264,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["baseworker:13",{"_index":537,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:135",{"_index":527,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:14",{"_index":534,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:144",{"_index":528,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:15",{"_index":535,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:16",{"_index":539,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:17",{"_index":540,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:18",{"_index":538,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:190",{"_index":531,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:21",{"_index":533,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:22",{"_index":536,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:242",{"_index":532,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:266",{"_index":530,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:40",{"_index":529,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["baseworker:54",{"_index":526,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["batch",{"_index":209,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["batch.foreach(msg",{"_index":799,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["batch.length",{"_index":308,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["batch.map",{"_index":558,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["batch.map(item",{"_index":494,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["batch.push",{"_index":302,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["batches",{"_index":317,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["batchflushtimer",{"_index":185,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["batchindex",{"_index":803,"title":{},"body":{"injectables/RabbitMQService.html":{},"index.html":{}}}],["batchitem",{"_index":220,"title":{"interfaces/BatchItem.html":{}},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"coverage.html":{},"index.html":{}}}],["batchsize",{"_index":448,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["bearer",{"_index":48,"title":{},"body":{"classes/ApiClient.html":{}}}],["before",{"_index":366,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["behavior",{"_index":1063,"title":{},"body":{"index.html":{}}}],["beneficiaries",{"_index":409,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["beneficiary",{"_index":405,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["beneficiary.email",{"_index":560,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["beneficiary.name",{"_index":559,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["beneficiary_queue",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"injectables/BeneficiaryWorker-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["beneficiaryapiprovider",{"_index":394,"title":{"injectables/BeneficiaryApiProvider.html":{}},"body":{"injectables/BeneficiaryApiProvider.html":{},"modules/DataProviderModule.html":{},"coverage.html":{}}}],["beneficiaryprismaprovider",{"_index":426,"title":{"injectables/BeneficiaryPrismaProvider.html":{}},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"coverage.html":{}}}],["beneficiaryworker",{"_index":154,"title":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}},"body":{"modules/AppModule.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"coverage.html":{},"index.html":{}}}],["beneficiaryworker1",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["beneficiaryworker2",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["beneficiaryworker3",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["benefit",{"_index":948,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":649,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["bootstrap",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1103,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1100,"title":{},"body":{"modules.html":{}}}],["buffer.from(json.stringify",{"_index":801,"title":{},"body":{"injectables/RabbitMQService.html":{},"index.html":{}}}],["buffer.from(json.stringify(item.data",{"_index":376,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["buffer.from(json.stringify(message",{"_index":789,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["build",{"_index":635,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{}}}],["built",{"_index":756,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["calculated",{"_index":331,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["calculateoptimalprefetch",{"_index":195,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["caller",{"_index":793,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["case",{"_index":977,"title":{},"body":{"index.html":{}}}],["cases",{"_index":1080,"title":{},"body":{"index.html":{}}}],["catch",{"_index":325,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["cause",{"_index":1085,"title":{},"body":{"index.html":{}}}],["chances",{"_index":989,"title":{},"body":{"index.html":{}}}],["channel",{"_index":186,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["channel.assertqueue('beneficiary",{"_index":478,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["channel.assertqueue(queue",{"_index":798,"title":{},"body":{"injectables/RabbitMQService.html":{},"index.html":{}}}],["channel.assertqueue(queue.name",{"_index":782,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["channel.consume('beneficiary",{"_index":479,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["channel.nack(message",{"_index":730,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["channel.prefetch(prefetch",{"_index":727,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["channel.prefetch(this.batchsize",{"_index":476,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["channel.sendtoqueue",{"_index":800,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["channel.sendtoqueue(queue",{"_index":964,"title":{},"body":{"index.html":{}}}],["channelwrapper",{"_index":462,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["checks",{"_index":980,"title":{},"body":{"index.html":{}}}],["choices",{"_index":935,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/ApiClient.html":{},"classes/WorkerTokensModule.html":{}},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiClient.html":{},"classes/WorkerTokensModule.html":{},"overview.html":{}}}],["classprovider",{"_index":593,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["cleandatabase",{"_index":686,"title":{},"body":{"injectables/PrismaService.html":{}}}],["clear",{"_index":381,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["cleared",{"_index":385,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["clearinterval(this.batchflushtimer",{"_index":383,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["client",{"_index":10,"title":{},"body":{"classes/ApiClient.html":{}}}],["clientproxyfactory.create",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["clients",{"_index":75,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["closed",{"_index":273,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["cluster_appmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":679,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":681,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":680,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["code",{"_index":946,"title":{},"body":{"index.html":{}}}],["coded",{"_index":1082,"title":{},"body":{"index.html":{}}}],["common",{"_index":1020,"title":{},"body":{"index.html":{}}}],["completed",{"_index":507,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/RabbitMQService.html":{}}}],["complex",{"_index":1088,"title":{},"body":{"index.html":{}}}],["complexity",{"_index":1061,"title":{},"body":{"index.html":{}}}],["components",{"_index":909,"title":{},"body":{"index.html":{}}}],["conclusion",{"_index":1089,"title":{},"body":{"index.html":{}}}],["concrete",{"_index":226,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["config",{"_index":25,"title":{},"body":{"classes/ApiClient.html":{},"modules/DataProviderModule.html":{},"miscellaneous/variables.html":{}}}],["config.apiurl",{"_index":585,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["config.dataprovider",{"_index":588,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["config.prismaservice",{"_index":587,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["configuration",{"_index":983,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":926,"title":{},"body":{"index.html":{}}}],["confirmchannel",{"_index":216,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["conflict",{"_index":288,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["connection",{"_index":453,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"dependencies.html":{},"index.html":{}}}],["connectionoptions",{"_index":652,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["cons",{"_index":1048,"title":{},"body":{"index.html":{}}}],["considerations",{"_index":1095,"title":{},"body":{"index.html":{}}}],["consistent",{"_index":1025,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":440,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["console.log('databatched",{"_index":125,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log('first",{"_index":446,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["console.log('prismaprovider",{"_index":439,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["console.log('queueoptions",{"_index":797,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["console.log('rabbitmq",{"_index":769,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["console.log('this.apiurl",{"_index":557,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["console.log('this.data",{"_index":555,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["console.log('this.dataprovider",{"_index":565,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["const",{"_index":85,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"injectables/RabbitMQService.html":{}}}],["constructor(@inject('api_url",{"_index":414,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["constructor(@inject(prisma_service",{"_index":438,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["constructor(apiurl",{"_index":400,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["constructor(config",{"_index":16,"title":{},"body":{"classes/ApiClient.html":{}}}],["constructor(connection",{"_index":450,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["constructor(params",{"_index":66,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["constructor(prisma",{"_index":428,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["constructor(protected",{"_index":1041,"title":{},"body":{"index.html":{}}}],["constructor(queueutilsservice",{"_index":203,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["consume",{"_index":1009,"title":{},"body":{"index.html":{}}}],["consumes",{"_index":1028,"title":{},"body":{"index.html":{}}}],["consumption",{"_index":1022,"title":{},"body":{"index.html":{}}}],["content",{"_index":300,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["control",{"_index":1076,"title":{},"body":{"index.html":{}}}],["controller",{"_index":90,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/RabbitMQModule.html":{},"coverage.html":{},"overview.html":{}}}],["controller('app",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["controllers",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/RabbitMQModule.html":{}}}],["controlling",{"_index":473,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"index.html":{}}}],["core",{"_index":908,"title":{},"body":{"index.html":{}}}],["correct",{"_index":988,"title":{},"body":{"index.html":{}}}],["correctly",{"_index":1027,"title":{},"body":{"index.html":{}}}],["count",{"_index":283,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["coupled",{"_index":1084,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":824,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crashes",{"_index":1069,"title":{},"body":{"index.html":{}}}],["create",{"_index":603,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{}}}],["createaxiosdefaults",{"_index":17,"title":{},"body":{"classes/ApiClient.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":268,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"index.html":{}}}],["currentbatch",{"_index":311,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["currentbatch.length",{"_index":313,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["custom",{"_index":667,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["data",{"_index":86,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"index.html":{}}}],["data_provider",{"_index":582,"title":{},"body":{"modules/DataProviderModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data_provider_${uuid",{"_index":584,"title":{},"body":{"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["database",{"_index":568,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["databatch",{"_index":493,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["databatch.length",{"_index":499,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["databatched",{"_index":118,"title":{},"body":{"controllers/AppController.html":{}}}],["dataprovider",{"_index":82,"title":{},"body":{"injectables/ApiProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{}}}],["dataproviderconfig",{"_index":658,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dataprovidermodule",{"_index":570,"title":{"modules/DataProviderModule.html":{}},"body":{"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"modules.html":{}}}],["dataprovidermodule.register",{"_index":610,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["dataproviders/dataprovider.module",{"_index":595,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["datasources",{"_index":691,"title":{},"body":{"injectables/PrismaService.html":{}}}],["datatoken",{"_index":638,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["db",{"_index":692,"title":{},"body":{"injectables/PrismaService.html":{}}}],["dbml",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["dead_letter_queue",{"_index":375,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["declarations",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["decorators",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["decreases",{"_index":958,"title":{},"body":{"index.html":{}}}],["deduplication",{"_index":1074,"title":{},"body":{"index.html":{}}}],["default",{"_index":236,"title":{},"body":{"injectables/BaseWorker.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"miscellaneous/variables.html":{}}}],["defaultbatchsize",{"_index":205,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["defaultexports",{"_index":766,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["defaultproviders",{"_index":759,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["define",{"_index":654,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["delay",{"_index":713,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["delay}ms",{"_index":732,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["delivery",{"_index":474,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"index.html":{}}}],["dependencies",{"_index":137,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":1099,"title":{},"body":{"index.html":{}}}],["description",{"_index":808,"title":{},"body":{"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["design",{"_index":934,"title":{},"body":{"index.html":{}}}],["destroyed",{"_index":770,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["detailed",{"_index":1037,"title":{},"body":{"index.html":{}}}],["detected",{"_index":289,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["developers",{"_index":1066,"title":{},"body":{"index.html":{}}}],["diagram",{"_index":1013,"title":{},"body":{"index.html":{}}}],["different",{"_index":915,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1000,"title":{},"body":{"index.html":{}}}],["dlq",{"_index":293,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["dlqchannel",{"_index":187,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["dlqerror",{"_index":359,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["documentation",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["down",{"_index":379,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["duplication",{"_index":1023,"title":{},"body":{"index.html":{}}}],["durable",{"_index":297,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":734,"title":{},"body":{"injectables/QueueUtilsService.html":{},"index.html":{}}}],["dynamic",{"_index":911,"title":{},"body":{"index.html":{}}}],["dynamically",{"_index":418,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"index.html":{}}}],["dynamicmodule",{"_index":577,"title":{},"body":{"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["e.g",{"_index":258,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"modules/DataProviderModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["e2e/src/support/global",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["each",{"_index":320,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["ease",{"_index":1093,"title":{},"body":{"index.html":{}}}],["easier",{"_index":1055,"title":{},"body":{"index.html":{}}}],["easily",{"_index":949,"title":{},"body":{"index.html":{}}}],["effectively",{"_index":996,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1017,"title":{},"body":{"index.html":{}}}],["email",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["email@${index",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["emitmessage",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["emitted",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["encapsulating",{"_index":1019,"title":{},"body":{"index.html":{}}}],["enhancing",{"_index":950,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":920,"title":{},"body":{"index.html":{}}}],["ensurequeuearguments",{"_index":196,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["ensures",{"_index":749,"title":{},"body":{"modules/RabbitMQModule.html":{},"index.html":{}}}],["ensuring",{"_index":1045,"title":{},"body":{"index.html":{}}}],["err",{"_index":489,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["error",{"_index":276,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["error('api",{"_index":80,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["error.message.includes('not_found",{"_index":345,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["errors",{"_index":792,"title":{},"body":{"injectables/RabbitMQService.html":{},"index.html":{}}}],["eslint",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["evenly",{"_index":1002,"title":{},"body":{"index.html":{}}}],["example",{"_index":947,"title":{},"body":{"index.html":{}}}],["example.rpc",{"_index":132,"title":{},"body":{"controllers/AppController.html":{}}}],["existing=${json.stringify",{"_index":336,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["existingargs",{"_index":332,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["exists",{"_index":344,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["expected",{"_index":982,"title":{},"body":{"index.html":{}}}],["exponential",{"_index":364,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["export",{"_index":42,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{}}}],["exports",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/PrismaModule.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"overview.html":{}}}],["exportstokens",{"_index":816,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["exportstokens.push(api_url",{"_index":818,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["exportstokens.push(prisma_service",{"_index":823,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["express",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["extend",{"_index":1057,"title":{},"body":{"index.html":{}}}],["extends",{"_index":520,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["extract",{"_index":492,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["factory",{"_index":669,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"miscellaneous/typealiases.html":{}}}],["factoryprovider",{"_index":594,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["failed",{"_index":360,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["fails",{"_index":513,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"index.html":{}}}],["false",{"_index":343,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["fault",{"_index":1058,"title":{},"body":{"index.html":{}}}],["features",{"_index":913,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":993,"title":{},"body":{"index.html":{}}}],["fetching",{"_index":656,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{}}}],["fill(data",{"_index":120,"title":{},"body":{"controllers/AppController.html":{}}}],["filter((module",{"_index":755,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["filter(boolean",{"_index":590,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["finalapiurl",{"_index":625,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["finaldataprovider",{"_index":622,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["finally",{"_index":516,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/RabbitMQService.html":{}}}],["finalprismaservice",{"_index":628,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["flag",{"_index":467,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["flagged",{"_index":985,"title":{},"body":{"index.html":{}}}],["flexibility",{"_index":941,"title":{},"body":{"index.html":{}}}],["flexible",{"_index":906,"title":{},"body":{"index.html":{}}}],["flow",{"_index":1012,"title":{},"body":{"index.html":{}}}],["flush",{"_index":257,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["flush_interval_ms",{"_index":188,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["follow",{"_index":1024,"title":{},"body":{"index.html":{}}}],["force",{"_index":339,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["forcedtoken",{"_index":574,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["forwardreference",{"_index":647,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["function",{"_index":410,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"coverage.html":{}}}],["functions",{"_index":886,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":971,"title":{},"body":{"index.html":{}}}],["generator",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["get('emit",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["get('send",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["getclient",{"_index":74,"title":{},"body":{"injectables/ApiProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdata",{"_index":180,"title":{},"body":{"injectables/AppService.html":{}}}],["getitem",{"_index":396,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["getlist",{"_index":397,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["getqueuebyname",{"_index":542,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getqueuebyname(queuestosetup",{"_index":550,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["getsession",{"_index":65,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["getsession(sessioncuid",{"_index":69,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["getting",{"_index":892,"title":{"index.html":{}},"body":{}}],["global",{"_index":461,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/PrismaModule.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"modules/WorkerModule.html":{}}}],["globaldataprovider",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaldataprovider.apiurl",{"_index":611,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaldataprovider.dataprovider",{"_index":608,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaldataprovider.prismaservice",{"_index":612,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaldataprovider?.apiurl",{"_index":627,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaldataprovider?.dataprovider",{"_index":624,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaldataprovider?.prismaservice",{"_index":630,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaldataproviderconfig",{"_index":591,"title":{"interfaces/GlobalDataProviderConfig.html":{}},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"coverage.html":{}}}],["globalmodule",{"_index":605,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["globaltoken",{"_index":609,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["graceful",{"_index":1034,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1104,"title":{},"body":{"modules.html":{}}}],["grouping",{"_index":956,"title":{},"body":{"index.html":{}}}],["guarantees",{"_index":974,"title":{},"body":{"index.html":{}}}],["handle",{"_index":728,"title":{},"body":{"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["handles",{"_index":902,"title":{},"body":{"index.html":{}}}],["handling",{"_index":719,"title":{},"body":{"injectables/QueueUtilsService.html":{},"index.html":{}}}],["hard",{"_index":1081,"title":{},"body":{"index.html":{}}}],["headers",{"_index":14,"title":{},"body":{"classes/ApiClient.html":{},"miscellaneous/variables.html":{}}}],["headers(headers",{"_index":52,"title":{},"body":{"classes/ApiClient.html":{}}}],["headersdefaults",{"_index":41,"title":{},"body":{"classes/ApiClient.html":{}}}],["hello",{"_index":130,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["helping",{"_index":994,"title":{},"body":{"index.html":{}}}],["helps",{"_index":999,"title":{},"body":{"index.html":{}}}],["here",{"_index":465,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["id",{"_index":51,"title":{},"body":{"classes/ApiClient.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["idataprovider",{"_index":413,"title":{"interfaces/IDataProvider.html":{}},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"coverage.html":{}}}],["identifier",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["immediately",{"_index":307,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["implement",{"_index":225,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["implemented",{"_index":991,"title":{},"body":{"index.html":{}}}],["implements",{"_index":255,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/PrismaService.html":{},"modules/RabbitMQModule.html":{},"index.html":{}}}],["import",{"_index":38,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["imports",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{}}}],["improve",{"_index":916,"title":{},"body":{"index.html":{}}}],["improves",{"_index":968,"title":{},"body":{"index.html":{}}}],["improving",{"_index":1029,"title":{},"body":{"index.html":{}}}],["include",{"_index":910,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"classes/WorkerTokensModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":208,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["individually",{"_index":955,"title":{},"body":{"index.html":{}}}],["inestapplication",{"_index":890,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["inherited",{"_index":525,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["initialization",{"_index":1003,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":291,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["initialized",{"_index":324,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"modules/RabbitMQModule.html":{}}}],["initializeworker",{"_index":197,"title":{},"body":{"injectables/BaseWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["initializeworker(channel",{"_index":215,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["initializing",{"_index":326,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["inject",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{}}}],["inject('amqp_connection",{"_index":469,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/RabbitMQService.html":{}}}],["inject('queue_names",{"_index":547,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["inject(amqp_connection",{"_index":543,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["inject(api_url",{"_index":549,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["inject(data_provider",{"_index":545,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["inject(prisma_service",{"_index":546,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["injectable",{"_index":57,"title":{"injectables/ApiProvider.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{}},"body":{"injectables/ApiProvider.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/ApiProvider.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"overview.html":{}}}],["instance",{"_index":267,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"modules/DataProviderModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"classes/WorkerTokensModule.html":{}}}],["instantiate",{"_index":662,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["integration",{"_index":894,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":1021,"title":{},"body":{"index.html":{}}}],["interface",{"_index":254,"title":{"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"coverage.html":{}}}],["interfaces",{"_index":393,"title":{},"body":{"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"overview.html":{}}}],["intervention",{"_index":984,"title":{},"body":{"index.html":{}}}],["introduce",{"_index":1064,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":615,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["issues",{"_index":1086,"title":{},"body":{"index.html":{}}}],["it's",{"_index":820,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["item",{"_index":233,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["item.data",{"_index":495,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["item.message",{"_index":497,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["item.name",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["items",{"_index":230,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{}}}],["john",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["json",{"_index":471,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["json.parse",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(message.content.tostring",{"_index":301,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"index.html":{}}}],["json.stringify(content).slice(0",{"_index":304,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["json.stringify(data",{"_index":481,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["json.stringify(existingargs",{"_index":334,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["json.stringify(item",{"_index":502,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{}}}],["json.stringify(message",{"_index":733,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["json.stringify(this.prisma",{"_index":442,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["json.stringify(this.queuearguments",{"_index":335,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["key",{"_index":53,"title":{},"body":{"classes/ApiClient.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["latency",{"_index":967,"title":{},"body":{"index.html":{}}}],["launched",{"_index":1011,"title":{},"body":{"index.html":{}}}],["legend",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["length",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leveraging",{"_index":1091,"title":{},"body":{"index.html":{}}}],["libs/.../clients.ts",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../dataprovider.module.ts",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../jest.config.ts",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../types.ts",{"_index":1112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../utils.ts",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/rabbitmq/jest.config.ts",{"_index":843,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts",{"_index":447,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:10",{"_index":456,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:11",{"_index":457,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:12",{"_index":460,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:13",{"_index":452,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:20",{"_index":454,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:54",{"_index":455,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:9",{"_index":459,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["libs/rabbitmq/src/dataproviders/api.provider.ts",{"_index":60,"title":{},"body":{"injectables/ApiProvider.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/dataproviders/api.provider.ts:16",{"_index":70,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["libs/rabbitmq/src/dataproviders/api.provider.ts:6",{"_index":67,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["libs/rabbitmq/src/dataproviders/client.api.ts",{"_index":6,"title":{},"body":{"classes/ApiClient.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/dataproviders/client.api.ts:14",{"_index":29,"title":{},"body":{"classes/ApiClient.html":{}}}],["libs/rabbitmq/src/dataproviders/client.api.ts:18",{"_index":34,"title":{},"body":{"classes/ApiClient.html":{}}}],["libs/rabbitmq/src/dataproviders/client.api.ts:22",{"_index":37,"title":{},"body":{"classes/ApiClient.html":{}}}],["libs/rabbitmq/src/dataproviders/client.api.ts:9",{"_index":19,"title":{},"body":{"classes/ApiClient.html":{}}}],["libs/rabbitmq/src/dataproviders/clients.ts",{"_index":846,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/rabbitmq/src/dataproviders/dataprovider.module.ts",{"_index":571,"title":{},"body":{"modules/DataProviderModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/rabbitmq/src/dataproviders/dataprovider.module.ts:12",{"_index":575,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["libs/rabbitmq/src/queue",{"_index":700,"title":{},"body":{"injectables/QueueUtilsService.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/rabbitmq.module.ts",{"_index":736,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["libs/rabbitmq/src/rabbitmq.module.ts:11",{"_index":740,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["libs/rabbitmq/src/rabbitmq.module.ts:55",{"_index":738,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["libs/rabbitmq/src/rabbitmq.module.ts:59",{"_index":737,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["libs/rabbitmq/src/rabbitmq.service.ts",{"_index":771,"title":{},"body":{"injectables/RabbitMQService.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/rabbitmq.service.ts:28",{"_index":778,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["libs/rabbitmq/src/rabbitmq.service.ts:39",{"_index":776,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["libs/rabbitmq/src/rabbitmq.service.ts:8",{"_index":780,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["libs/rabbitmq/src/rabbitmq.service.ts:9",{"_index":774,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["libs/rabbitmq/src/types.ts",{"_index":646,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["libs/rabbitmq/src/utils.ts",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/rabbitmq/src/worker",{"_index":811,"title":{},"body":{"classes/WorkerTokensModule.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/worker.base.ts",{"_index":184,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/worker.base.ts:13",{"_index":244,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:135",{"_index":213,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:14",{"_index":239,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:144",{"_index":214,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:15",{"_index":241,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:16",{"_index":247,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:17",{"_index":248,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:18",{"_index":245,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:190",{"_index":221,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:21",{"_index":238,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:22",{"_index":212,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:242",{"_index":232,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:264",{"_index":224,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:266",{"_index":218,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.base.ts:40",{"_index":217,"title":{},"body":{"injectables/BaseWorker.html":{}}}],["libs/rabbitmq/src/worker.module.ts",{"_index":592,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"coverage.html":{}}}],["libs/rabbitmq/src/worker.module.ts:17",{"_index":809,"title":{},"body":{"modules/WorkerModule.html":{}}}],["license",{"_index":1108,"title":{},"body":{"properties.html":{}}}],["lifecycle",{"_index":903,"title":{},"body":{"index.html":{}}}],["limit",{"_index":992,"title":{},"body":{"index.html":{}}}],["limited",{"_index":1075,"title":{},"body":{"index.html":{}}}],["list",{"_index":433,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["literal",{"_index":36,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"injectables/AppService.html":{},"modules/DataProviderModule.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"miscellaneous/typealiases.html":{}}}],["logger",{"_index":190,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["logger(beneficiaryworker.name",{"_index":458,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["logger(queueutilsservice.name",{"_index":717,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["logger(rabbitmqservice.name",{"_index":779,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["logger(this.constructor.name",{"_index":243,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["logging",{"_index":1036,"title":{},"body":{"index.html":{}}}],["logic",{"_index":617,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"injectables/PrismaService.html":{},"modules/WorkerModule.html":{},"index.html":{}}}],["logs",{"_index":1038,"title":{},"body":{"index.html":{}}}],["loss",{"_index":976,"title":{},"body":{"index.html":{}}}],["made",{"_index":1098,"title":{},"body":{"index.html":{}}}],["maintain",{"_index":1056,"title":{},"body":{"index.html":{}}}],["maintains",{"_index":1092,"title":{},"body":{"index.html":{}}}],["maintenance",{"_index":1094,"title":{},"body":{"index.html":{}}}],["making",{"_index":1054,"title":{},"body":{"index.html":{}}}],["manage",{"_index":995,"title":{},"body":{"index.html":{}}}],["management",{"_index":904,"title":{},"body":{"index.html":{}}}],["manager",{"_index":464,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"dependencies.html":{},"index.html":{}}}],["manages",{"_index":1033,"title":{},"body":{"index.html":{}}}],["managing",{"_index":899,"title":{},"body":{"index.html":{}}}],["manner",{"_index":907,"title":{},"body":{"index.html":{}}}],["manual",{"_index":722,"title":{},"body":{"injectables/QueueUtilsService.html":{},"index.html":{}}}],["many",{"_index":931,"title":{},"body":{"index.html":{}}}],["map((item",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["match",{"_index":981,"title":{},"body":{"index.html":{}}}],["matching",{"_index":56,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(number(process.env['max_prefetch",{"_index":328,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["math.max",{"_index":327,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["math.pow(2",{"_index":371,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["math.random()}.com",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["max",{"_index":350,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxpriority",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxretries",{"_index":347,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["mechanism",{"_index":1078,"title":{},"body":{"index.html":{}}}],["merge",{"_index":747,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["mergedcontrollers",{"_index":757,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["mergedexports",{"_index":767,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["mergedimports",{"_index":752,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["mergedproviders",{"_index":763,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["message",{"_index":128,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["messagebatch",{"_index":496,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["messagebatch.foreach((message",{"_index":509,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["messages",{"_index":508,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["messages.length",{"_index":805,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["messages.slice(i",{"_index":962,"title":{},"body":{"index.html":{}}}],["messagettl",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["met",{"_index":483,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["metadata",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":63,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{}}}],["mini",{"_index":634,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["minimizes",{"_index":975,"title":{},"body":{"index.html":{}}}],["misbehaving",{"_index":990,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":885,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1109,"title":{},"body":{"properties.html":{}}}],["mod",{"_index":632,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["mode",{"_index":306,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["modifying",{"_index":940,"title":{},"body":{"index.html":{}}}],["modular",{"_index":1051,"title":{},"body":{"index.html":{}}}],["module",{"_index":134,"title":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"modules/PrismaModule.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{},"overview.html":{}}}],["modulemetadata",{"_index":648,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["modules",{"_index":136,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"modules/PrismaModule.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"modules.html":{},"overview.html":{}}}],["monitoring",{"_index":1039,"title":{},"body":{"index.html":{}}}],["more",{"_index":1001,"title":{},"body":{"index.html":{}}}],["moving",{"_index":353,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["msg",{"_index":802,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["multiple",{"_index":914,"title":{},"body":{"index.html":{}}}],["mutex",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["nack",{"_index":710,"title":{},"body":{"injectables/QueueUtilsService.html":{},"index.html":{}}}],["nack(item",{"_index":726,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":569,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["needed",{"_index":945,"title":{},"body":{"index.html":{}}}],["needing",{"_index":1087,"title":{},"body":{"index.html":{}}}],["negative",{"_index":724,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["nestjs",{"_index":661,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["nestjs/common",{"_index":73,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["network",{"_index":959,"title":{},"body":{"index.html":{}}}],["never",{"_index":664,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["new",{"_index":79,"title":{},"body":{"injectables/ApiProvider.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":367,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{}}}],["nodejs.timeout",{"_index":234,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["null",{"_index":235,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["number",{"_index":206,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["objects",{"_index":424,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["once",{"_index":932,"title":{},"body":{"index.html":{}}}],["one",{"_index":382,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["ongoing",{"_index":484,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["onmoduledestroy",{"_index":198,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"modules/RabbitMQModule.html":{},"index.html":{}}}],["onmoduleinit",{"_index":449,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"modules/RabbitMQModule.html":{}}}],["operations",{"_index":960,"title":{},"body":{"index.html":{}}}],["optimizations",{"_index":933,"title":{},"body":{"index.html":{}}}],["optimize",{"_index":928,"title":{},"body":{"index.html":{}}}],["optimizes",{"_index":957,"title":{},"body":{"index.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":665,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["options",{"_index":650,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"miscellaneous/variables.html":{}}}],["options.ampqprovidername",{"_index":744,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["options.connectionoptions",{"_index":746,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["options.controllers",{"_index":758,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["options.exports",{"_index":768,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["options.imports",{"_index":754,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["options.providers",{"_index":764,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["options.queues",{"_index":761,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["options.workermoduleprovider",{"_index":753,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["opts",{"_index":815,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["opts.apiurl",{"_index":817,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["opts.prismaservice",{"_index":819,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["out",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}],["over",{"_index":1077,"title":{},"body":{"index.html":{}}}],["overall",{"_index":969,"title":{},"body":{"index.html":{}}}],["overhead",{"_index":919,"title":{},"body":{"index.html":{}}}],["overview",{"_index":895,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwhelmed",{"_index":998,"title":{},"body":{"index.html":{}}}],["package",{"_index":857,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":20,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":68,"title":{},"body":{"injectables/ApiProvider.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["params.url",{"_index":77,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["partial",{"_index":256,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["particularly",{"_index":1065,"title":{},"body":{"index.html":{}}}],["pattern",{"_index":1026,"title":{},"body":{"index.html":{}}}],["pause",{"_index":564,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["performance",{"_index":970,"title":{},"body":{"index.html":{}}}],["persistent",{"_index":804,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["perworkermodules",{"_index":618,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["perworkermodules.push(mod",{"_index":633,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["plugin",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["plus",{"_index":750,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["port",{"_index":891,"title":{},"body":{"miscellaneous/functions.html":{}}}],["possibly",{"_index":602,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["potential",{"_index":1097,"title":{},"body":{"index.html":{}}}],["prefetch",{"_index":282,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["prefetchcount",{"_index":279,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["prefetching",{"_index":927,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["prettier",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["priority",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma",{"_index":430,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"dependencies.html":{}}}],["prisma.service",{"_index":683,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":412,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.service",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["prisma:prismaservice",{"_index":544,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["prisma_service",{"_index":437,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":685,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":678,"title":{"modules/PrismaModule.html":{}},"body":{"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaprovider",{"_index":441,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["prismaservice",{"_index":158,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":61,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["process",{"_index":319,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["process.env.database_url",{"_index":693,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.node_env",{"_index":696,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.rabbit_mq_url",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env['force_queue_reset",{"_index":338,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["processbatch",{"_index":199,"title":{},"body":{"injectables/BaseWorker.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{}}}],["processbatch(batch",{"_index":219,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["processbatch(items",{"_index":705,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["processed",{"_index":505,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["processing",{"_index":229,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["processitem",{"_index":201,"title":{},"body":{"injectables/BaseWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["processitem(batch",{"_index":524,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["processitem(items",{"_index":222,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["processitemswithack",{"_index":702,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["processitemswithack(items",{"_index":708,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["processor",{"_index":706,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["processor(item",{"_index":720,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["production",{"_index":697,"title":{},"body":{"injectables/PrismaService.html":{}}}],["projectcontants.elclient",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["promise",{"_index":72,"title":{},"body":{"injectables/ApiProvider.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["promise((resolve",{"_index":369,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["promise.all([this.user.deletemany",{"_index":699,"title":{},"body":{"injectables/PrismaService.html":{}}}],["proper",{"_index":1073,"title":{},"body":{"index.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"properties.html":{}}}],["pros",{"_index":1047,"title":{},"body":{"index.html":{}}}],["protected",{"_index":189,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["provide",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{}}}],["provided",{"_index":420,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["provided=${json.stringify(this.queuearguments",{"_index":337,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["provider",{"_index":579,"title":{},"body":{"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{}}}],["provider/tokens",{"_index":604,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["providers",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"overview.html":{}}}],["providers.push",{"_index":586,"title":{},"body":{"modules/DataProviderModule.html":{},"classes/WorkerTokensModule.html":{}}}],["provides",{"_index":897,"title":{},"body":{"index.html":{}}}],["public",{"_index":9,"title":{},"body":{"classes/ApiClient.html":{}}}],["publish",{"_index":361,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/RabbitMQService.html":{}}}],["publish/consume",{"_index":1015,"title":{},"body":{"index.html":{}}}],["publishbatchtoqueue",{"_index":772,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["publishbatchtoqueue(queue",{"_index":775,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["published",{"_index":377,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/RabbitMQService.html":{}}}],["publishtodlq",{"_index":202,"title":{},"body":{"injectables/BaseWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["publishtodlq(item",{"_index":231,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["publishtoqueue",{"_index":773,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["publishtoqueue(queue",{"_index":777,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["q.name",{"_index":795,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["queue",{"_index":250,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["queue)?.options",{"_index":796,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["queue.name",{"_index":785,"title":{},"body":{"injectables/RabbitMQService.html":{},"miscellaneous/variables.html":{}}}],["queue.options",{"_index":783,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["queue.options.arguments",{"_index":552,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["queue/src/app/app.controller.ts",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["queue/src/app/app.controller.ts:14",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["queue/src/app/app.controller.ts:35",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["queue/src/app/app.module.ts",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["queue/src/app/app.service.ts",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["queue/src/app/app.service.ts:5",{"_index":181,"title":{},"body":{"injectables/AppService.html":{}}}],["queue/src/constants.ts",{"_index":835,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["queue/src/main.ts",{"_index":836,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["queue/src/prisma/prisma.module.ts",{"_index":682,"title":{},"body":{"modules/PrismaModule.html":{}}}],["queue/src/prisma/prisma.service.ts",{"_index":684,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["queue/src/prisma/prisma.service.ts:16",{"_index":690,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queue/src/prisma/prisma.service.ts:20",{"_index":689,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queue/src/prisma/prisma.service.ts:24",{"_index":688,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queue/src/prisma/prisma.service.ts:5",{"_index":687,"title":{},"body":{"injectables/PrismaService.html":{}}}],["queue/src/swagger.ts",{"_index":838,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["queue/src/workers/beneficiary/beneficiary.api.provider.ts",{"_index":395,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"coverage.html":{}}}],["queue/src/workers/beneficiary/beneficiary.api.provider.ts:16",{"_index":411,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.api.provider.ts:18",{"_index":403,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.api.provider.ts:23",{"_index":408,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.api.provider.ts:27",{"_index":406,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.api.provider.ts:8",{"_index":401,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.prisma.provider.ts",{"_index":427,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"coverage.html":{}}}],["queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:11",{"_index":434,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:12",{"_index":435,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:13",{"_index":436,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:14",{"_index":432,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:7",{"_index":429,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts",{"_index":519,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"coverage.html":{}}}],["queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts:17",{"_index":522,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts:39",{"_index":523,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["queue_names",{"_index":760,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["queueargsmatch",{"_index":285,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["queuearguments",{"_index":211,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["queuedefinition",{"_index":675,"title":{"interfaces/QueueDefinition.html":{}},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"coverage.html":{}}}],["queuename",{"_index":191,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["queueoptions",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/RabbitMQService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["queues",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["queues.find(queue",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuestosetup",{"_index":521,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["queueutilsservice",{"_index":204,"title":{"injectables/QueueUtilsService.html":{}},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"coverage.html":{},"index.html":{}}}],["rabbitmq",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["rabbitmq.module.ts",{"_index":741,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["rabbitmq.service",{"_index":742,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["rabbitmqmodule",{"_index":146,"title":{"modules/RabbitMQModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RabbitMQModule.html":{},"modules.html":{},"overview.html":{}}}],["rabbitmqmodule.register",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["rabbitmqmoduleoptions",{"_index":252,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["rabbitmqmoduleoptions['queues",{"_index":548,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"miscellaneous/variables.html":{}}}],["rabbitmqmoduleoptions['queues'][0]['options']['arguments",{"_index":262,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["rabbitmqregisteroptions",{"_index":676,"title":{"interfaces/RabbitMQRegisterOptions.html":{}},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"coverage.html":{}}}],["rabbitmqservice",{"_index":110,"title":{"injectables/RabbitMQService.html":{}},"body":{"controllers/AppController.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"coverage.html":{}}}],["rate",{"_index":475,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["re",{"_index":358,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["reached",{"_index":352,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["reaches",{"_index":305,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["readfilesync(`${__dirname}/.swcrc",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["ready",{"_index":290,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["received",{"_index":303,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["record",{"_index":620,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["reduce",{"_index":918,"title":{},"body":{"index.html":{}}}],["reduces",{"_index":966,"title":{},"body":{"index.html":{}}}],["reducing",{"_index":953,"title":{},"body":{"index.html":{}}}],["redundancy",{"_index":1052,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["regarding",{"_index":1096,"title":{},"body":{"index.html":{}}}],["register",{"_index":572,"title":{},"body":{"modules/DataProviderModule.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{}}}],["register(config",{"_index":573,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["register(options",{"_index":739,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["register(opts",{"_index":813,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["register(params",{"_index":601,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["registration",{"_index":912,"title":{},"body":{"index.html":{}}}],["reinitialization",{"_index":1005,"title":{},"body":{"index.html":{}}}],["reinitializing",{"_index":274,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["reliable",{"_index":921,"title":{},"body":{"index.html":{}}}],["remain",{"_index":362,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["remaining",{"_index":380,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["remove",{"_index":938,"title":{},"body":{"index.html":{}}}],["removing",{"_index":1050,"title":{},"body":{"index.html":{}}}],["repository",{"_index":896,"title":{},"body":{"index.html":{}}}],["requeue",{"_index":512,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["requeued",{"_index":515,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["requeueing",{"_index":735,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["requeuemessage",{"_index":703,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["requeuemessage(channel",{"_index":712,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["requeues",{"_index":1031,"title":{},"body":{"index.html":{}}}],["requeuing",{"_index":1060,"title":{},"body":{"index.html":{}}}],["required",{"_index":81,"title":{},"body":{"injectables/ApiProvider.html":{},"index.html":{}}}],["reset",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"injectables/BeneficiaryWorker.html":{},"modules/PrismaModule.html":{},"index.html":{},"overview.html":{}}}],["resetting",{"_index":340,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["resource",{"_index":929,"title":{},"body":{"index.html":{}}}],["response",{"_index":131,"title":{},"body":{"controllers/AppController.html":{}}}],["result",{"_index":1071,"title":{},"body":{"index.html":{}}}],["results",{"_index":55,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":791,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["retries",{"_index":351,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["retry",{"_index":368,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["retrycount",{"_index":346,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["return",{"_index":89,"title":{},"body":{"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"injectables/PrismaService.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":670,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["returns",{"_index":31,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"injectables/PrismaService.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"injectables/RabbitMQService.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["robust",{"_index":898,"title":{},"body":{"index.html":{}}}],["rumsan/nest",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["rxjs",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["safer",{"_index":822,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["same",{"_index":616,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["saved",{"_index":444,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["saveitem",{"_index":398,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["saveitem(beneficiary",{"_index":404,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["savelist",{"_index":399,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["savelist(beneficiaries",{"_index":407,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["savelist(list",{"_index":431,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{}}}],["saving",{"_index":657,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["scalability",{"_index":952,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":905,"title":{},"body":{"index.html":{}}}],["scale",{"_index":943,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":260,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["sendmessage",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["separate",{"_index":292,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["service",{"_index":1014,"title":{},"body":{"index.html":{}}}],["sessioncuid",{"_index":71,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["set",{"_index":45,"title":{},"body":{"classes/ApiClient.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["setaccesstoken",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setaccesstoken(token",{"_index":27,"title":{},"body":{"classes/ApiClient.html":{}}}],["setappid",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setappid(appid",{"_index":33,"title":{},"body":{"classes/ApiClient.html":{}}}],["setchannelprefetch",{"_index":704,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["setchannelprefetch(channel",{"_index":715,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["setheaders",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setheaders(headers",{"_index":35,"title":{},"body":{"classes/ApiClient.html":{}}}],["setinterval(async",{"_index":322,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["sets",{"_index":677,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["settimeout",{"_index":729,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["settimeout(resolve",{"_index":370,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["setting",{"_index":281,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["setup",{"_index":472,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["setup.ts",{"_index":829,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setupswagger",{"_index":839,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":889,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shutdown",{"_index":1035,"title":{},"body":{"index.html":{}}}],["shutting",{"_index":378,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["simulate",{"_index":503,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["single",{"_index":787,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["size",{"_index":312,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/RabbitMQService.html":{}}}],["solution",{"_index":1090,"title":{},"body":{"index.html":{}}}],["soon",{"_index":1010,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{}}}],["specify",{"_index":666,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["src/rabbitmq/dataproviders/dataprovider.module.ts",{"_index":578,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["src/rabbitmq/worker.module.ts",{"_index":810,"title":{},"body":{"modules/WorkerModule.html":{}}}],["start",{"_index":1006,"title":{},"body":{"index.html":{}}}],["started",{"_index":893,"title":{"index.html":{}},"body":{}}],["startup",{"_index":1007,"title":{},"body":{"index.html":{}}}],["state",{"_index":466,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["statements",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":192,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{}}}],["string",{"_index":28,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":655,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["success",{"_index":349,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["successful",{"_index":972,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":567,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["suitable",{"_index":1079,"title":{},"body":{"index.html":{}}}],["super",{"_index":551,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"injectables/PrismaService.html":{}}}],["supplied",{"_index":762,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["support",{"_index":1101,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1102,"title":{},"body":{"modules.html":{}}}],["system",{"_index":901,"title":{},"body":{"index.html":{}}}],["system's",{"_index":951,"title":{},"body":{"index.html":{}}}],["system’s",{"_index":1062,"title":{},"body":{"index.html":{}}}],["t",{"_index":223,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/QueueUtilsService.html":{},"index.html":{}}}],["table",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["teardown",{"_index":698,"title":{},"body":{"injectables/PrismaService.html":{}}}],["there's",{"_index":606,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["this.$connect",{"_index":694,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":695,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._client",{"_index":83,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["this._client.session.get(sessioncuid",{"_index":88,"title":{},"body":{"injectables/ApiProvider.html":{}}}],["this.acknowledgemode",{"_index":310,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.amqpconnection",{"_index":390,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.amqpconnection.close",{"_index":391,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.amqpconnection.createchannel",{"_index":295,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.apiurl",{"_index":417,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["this.axiosinstance",{"_index":415,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["this.axiosinstance.get('/beneficiaries",{"_index":421,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["this.axiosinstance.post('/beneficiaries",{"_index":425,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{}}}],["this.batch.length",{"_index":485,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.batch.push",{"_index":482,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.batch.splice(0",{"_index":491,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.batchflushtimer",{"_index":321,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.batchsize",{"_index":477,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.calculateoptimalprefetch",{"_index":280,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.channel",{"_index":270,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"index.html":{}}}],["this.channel.ack(item.message",{"_index":355,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.channel.ack(message",{"_index":510,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.channel.assertqueue(this.queuename",{"_index":342,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.channel.close",{"_index":386,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.channel.consume(this.queuename",{"_index":299,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.channel.deletequeue(this.queuename",{"_index":341,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.channel.nack(item.message",{"_index":973,"title":{},"body":{"index.html":{}}}],["this.channel.nack(message",{"_index":514,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.channel.on('close",{"_index":271,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.channel.on('error",{"_index":275,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.channel.prefetch(prefetchcount",{"_index":284,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.channel.prefetch(this.defaultbatchsize",{"_index":997,"title":{},"body":{"index.html":{}}}],["this.channelwrapper",{"_index":553,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["this.channelwrapper.addsetup(async",{"_index":963,"title":{},"body":{"index.html":{}}}],["this.channelwrapper.close",{"_index":807,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.channelwrapper.sendtoqueue(queue",{"_index":788,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.client",{"_index":43,"title":{},"body":{"classes/ApiClient.html":{}}}],["this.client.defaults.headers",{"_index":54,"title":{},"body":{"classes/ApiClient.html":{}}}],["this.client.defaults.headers['app",{"_index":50,"title":{},"body":{"classes/ApiClient.html":{}}}],["this.client.defaults.headers['authorization",{"_index":47,"title":{},"body":{"classes/ApiClient.html":{}}}],["this.connection.createchannel",{"_index":470,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["this.dataprovider",{"_index":556,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["this.dataprovider.savelist(beneficiaries",{"_index":566,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["this.defaultbatchsize",{"_index":309,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.dlqchannel",{"_index":294,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.dlqchannel.assertqueue('dead_letter_queue",{"_index":296,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.dlqchannel.close",{"_index":388,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.dlqchannel.sendtoqueue",{"_index":374,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.ensurequeuearguments",{"_index":286,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.flush_interval_ms",{"_index":323,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.initializeworker(channel",{"_index":554,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["this.logger.error",{"_index":277,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.logger.error('error",{"_index":490,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["this.logger.error(`${this.queuename",{"_index":1044,"title":{},"body":{"index.html":{}}}],["this.logger.error(`error",{"_index":721,"title":{},"body":{"injectables/QueueUtilsService.html":{},"index.html":{}}}],["this.logger.error(`failed",{"_index":790,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.logger.log",{"_index":266,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["this.logger.log('batch",{"_index":506,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.logger.log('beneficiary",{"_index":488,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.logger.log('rabbitmq",{"_index":786,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.logger.log(`${this.queuename",{"_index":1042,"title":{},"body":{"index.html":{}}}],["this.logger.log(`batch",{"_index":384,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.logger.log(`beneficiary",{"_index":504,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.logger.log(`channel",{"_index":387,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/QueueUtilsService.html":{}}}],["this.logger.log(`closing",{"_index":806,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.logger.log(`connection",{"_index":392,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.logger.log(`dlq",{"_index":389,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.logger.log(`message",{"_index":731,"title":{},"body":{"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{}}}],["this.logger.log(`optimal",{"_index":330,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.logger.log(`processing",{"_index":501,"title":{},"body":{"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["this.logger.log(`queue",{"_index":784,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.logger.log(`received",{"_index":480,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.logger.log(`remaining",{"_index":518,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.logger.log(`starting",{"_index":498,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.logger.warn",{"_index":272,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.logger.warn(`${this.queuename",{"_index":1043,"title":{},"body":{"index.html":{}}}],["this.prisma.$transaction(async",{"_index":561,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["this.prisma.beneficiary.createmany",{"_index":445,"title":{},"body":{"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker-1.html":{}}}],["this.processbatch",{"_index":487,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.processbatch(currentbatch",{"_index":314,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.processing",{"_index":486,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.processitem([item.data",{"_index":1046,"title":{},"body":{"index.html":{}}}],["this.publishtodlq(item",{"_index":354,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["this.queuearguments",{"_index":333,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.queuename",{"_index":263,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["this.queuestosetup",{"_index":781,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.queuestosetup.find(q",{"_index":794,"title":{},"body":{"injectables/RabbitMQService.html":{}}}],["this.queueutilsservice.processbatch(databatch",{"_index":500,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["this.rabbitmqservice.publishbatchtoqueue",{"_index":126,"title":{},"body":{"controllers/AppController.html":{}}}],["this.workerid",{"_index":265,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"index.html":{}}}],["throughput",{"_index":917,"title":{},"body":{"index.html":{}}}],["throw",{"_index":78,"title":{},"body":{"injectables/ApiProvider.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/RabbitMQService.html":{}}}],["tightly",{"_index":1083,"title":{},"body":{"index.html":{}}}],["time",{"_index":1008,"title":{},"body":{"index.html":{}}}],["timer",{"_index":316,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["together",{"_index":965,"title":{},"body":{"index.html":{}}}],["token",{"_index":30,"title":{},"body":{"classes/ApiClient.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":613,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{}}}],["tokens.module",{"_index":600,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["tokens.module.ts",{"_index":812,"title":{},"body":{"classes/WorkerTokensModule.html":{},"coverage.html":{}}}],["tokens.module.ts:6",{"_index":814,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["tolerance",{"_index":1059,"title":{},"body":{"index.html":{}}}],["total",{"_index":269,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/RabbitMQService.html":{}}}],["track",{"_index":468,"title":{},"body":{"injectables/BeneficiaryWorker.html":{}}}],["transport",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["transport.tcp",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["troubleshooting",{"_index":1040,"title":{},"body":{"index.html":{}}}],["true",{"_index":298,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":278,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"index.html":{}}}],["ttl",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tx",{"_index":562,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["tx.beneficiary.createmany",{"_index":563,"title":{},"body":{"injectables/BeneficiaryWorker-1.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/ApiClient.html":{},"injectables/ApiProvider.html":{},"injectables/AppService.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryApiProvider.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"injectables/QueueUtilsService.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"injectables/RabbitMQService.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1110,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":253,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{}}}],["types/amqplib",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["unacknowledged",{"_index":363,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{}}}],["undefined",{"_index":240,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"modules/RabbitMQModule.html":{}}}],["unfamiliar",{"_index":1067,"title":{},"body":{"index.html":{}}}],["union",{"_index":674,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"miscellaneous/typealiases.html":{}}}],["uniquetoken",{"_index":583,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["unknown",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"injectables/BeneficiaryPrismaProvider.html":{},"injectables/PrismaService.html":{}}}],["unless",{"_index":1072,"title":{},"body":{"index.html":{}}}],["unnecessary",{"_index":1004,"title":{},"body":{"index.html":{}}}],["up",{"_index":315,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["url",{"_index":76,"title":{},"body":{"injectables/ApiProvider.html":{},"injectables/BeneficiaryApiProvider.html":{},"interfaces/GlobalDataProviderConfig.html":{},"injectables/PrismaService.html":{},"modules/WorkerModule.html":{}}}],["urls",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["usage",{"_index":930,"title":{},"body":{"index.html":{}}}],["use",{"_index":607,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"index.html":{}}}],["useclass",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"index.html":{}}}],["used",{"_index":1049,"title":{},"body":{"index.html":{}}}],["useexisting",{"_index":589,"title":{},"body":{"modules/DataProviderModule.html":{}}}],["usefactory",{"_index":639,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{}}}],["useprisma",{"_index":659,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["user",{"_index":748,"title":{},"body":{"modules/RabbitMQModule.html":{}}}],["uses",{"_index":660,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"index.html":{}}}],["usevalue",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/DataProviderModule.html":{},"modules/RabbitMQModule.html":{},"classes/WorkerTokensModule.html":{}}}],["using",{"_index":419,"title":{},"body":{"injectables/BeneficiaryApiProvider.html":{},"index.html":{}}}],["usually",{"_index":821,"title":{},"body":{"classes/WorkerTokensModule.html":{}}}],["utf",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.service",{"_index":251,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"modules/RabbitMQModule.html":{}}}],["utils.service.ts",{"_index":701,"title":{},"body":{"injectables/QueueUtilsService.html":{},"coverage.html":{}}}],["utils.service.ts:20",{"_index":711,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["utils.service.ts:38",{"_index":716,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["utils.service.ts:48",{"_index":714,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["utils.service.ts:6",{"_index":718,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["utils.service.ts:9",{"_index":707,"title":{},"body":{"injectables/QueueUtilsService.html":{}}}],["uuid",{"_index":581,"title":{},"body":{"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"dependencies.html":{}}}],["v",{"_index":1016,"title":{},"body":{"index.html":{}}}],["v4",{"_index":580,"title":{},"body":{"modules/DataProviderModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["valid",{"_index":672,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["validate",{"_index":925,"title":{},"body":{"index.html":{}}}],["validation",{"_index":979,"title":{},"body":{"index.html":{}}}],["value",{"_index":237,"title":{},"body":{"injectables/BaseWorker.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{},"injectables/RabbitMQService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1113,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1106,"title":{},"body":{"properties.html":{}}}],["void",{"_index":32,"title":{},"body":{"classes/ApiClient.html":{},"injectables/BaseWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"injectables/QueueUtilsService.html":{}}}],["w",{"_index":640,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["w.inject",{"_index":643,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["w.provide",{"_index":641,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["w.useclass",{"_index":644,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["w.usefactory",{"_index":642,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["whether",{"_index":1032,"title":{},"body":{"index.html":{}}}],["without",{"_index":939,"title":{},"body":{"index.html":{}}}],["work",{"_index":987,"title":{},"body":{"index.html":{}}}],["worker",{"_index":227,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker.html":{},"injectables/BeneficiaryWorker-1.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["worker.apiurl",{"_index":626,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["worker.prismaservice",{"_index":629,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["worker.workerdataprovider",{"_index":623,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["workerclassdefinition",{"_index":597,"title":{"interfaces/WorkerClassDefinition.html":{}},"body":{"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["workercount",{"_index":193,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["workerdataprovider",{"_index":668,"title":{},"body":{"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["workerdefinition",{"_index":596,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["workerfactorydefinition",{"_index":598,"title":{"interfaces/WorkerFactoryDefinition.html":{}},"body":{"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["workerid",{"_index":194,"title":{},"body":{"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"injectables/BeneficiaryWorker-1.html":{},"index.html":{}}}],["workermodule",{"_index":153,"title":{"modules/WorkerModule.html":{}},"body":{"modules/AppModule.html":{},"interfaces/GlobalDataProviderConfig.html":{},"modules/RabbitMQModule.html":{},"modules/WorkerModule.html":{},"modules.html":{}}}],["workermodule.register",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["workermoduleprovider",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"modules/RabbitMQModule.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{}}}],["workerproviders",{"_index":636,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["workers",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"injectables/BaseWorker.html":{},"interfaces/BatchItem.html":{},"interfaces/GlobalDataProviderConfig.html":{},"interfaces/IDataProvider.html":{},"interfaces/QueueDefinition.html":{},"interfaces/RabbitMQRegisterOptions.html":{},"interfaces/WorkerClassDefinition.html":{},"interfaces/WorkerFactoryDefinition.html":{},"modules/WorkerModule.html":{},"index.html":{}}}],["workers.foreach(worker",{"_index":621,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["workers.map(worker",{"_index":637,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["workers/beneficiary/beneficiary.rabbitmq.worker",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["workertokensmodule",{"_index":599,"title":{"classes/WorkerTokensModule.html":{}},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{},"classes/WorkerTokensModule.html":{},"coverage.html":{}}}],["workertokensmodule.register",{"_index":614,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["workertotoken",{"_index":619,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["workertotoken[worker.provide",{"_index":631,"title":{},"body":{"interfaces/GlobalDataProviderConfig.html":{},"modules/WorkerModule.html":{}}}],["x",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":576,"title":{},"body":{"modules/DataProviderModule.html":{},"injectables/QueueUtilsService.html":{}}}],["zoom",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiClient.html":{"url":"classes/ApiClient.html","title":"class - ApiClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/dataproviders/client.api.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                client\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    accessToken\n                                \n                                \n                                    appId\n                                \n                                \n                                    headers\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CreateAxiosDefaults)\n                    \n                \n                        \n                            \n                                Defined in libs/rabbitmq/src/dataproviders/client.api.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    CreateAxiosDefaults\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/dataproviders/client.api.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        accessToken\n                    \n                \n\n\n                \n                    \n                        setaccessToken(token: string)\n                    \n                \n                            \n                                \n                                    Defined in libs/rabbitmq/src/dataproviders/client.api.ts:14\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            token\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        appId\n                    \n                \n\n\n                \n                    \n                        setappId(appId: string)\n                    \n                \n                            \n                                \n                                    Defined in libs/rabbitmq/src/dataproviders/client.api.ts:18\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            appId\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n\n                \n                    \n                        setheaders(headers: literal type)\n                    \n                \n                            \n                                \n                                    Defined in libs/rabbitmq/src/dataproviders/client.api.ts:22\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            headers\n                                                    \n                                                            \n                                                                        literal type\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import axios, {\n  AxiosHeaderValue,\n  AxiosInstance,\n  CreateAxiosDefaults,\n  HeadersDefaults,\n} from 'axios';\n\nexport class ApiClient {\n  public client: AxiosInstance;\n  constructor(config: CreateAxiosDefaults) {\n    this.client = axios.create(config);\n  }\n\n  public set accessToken(token: string) {\n    this.client.defaults.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  public set appId(appId: string) {\n    this.client.defaults.headers['app-id'] = appId;\n  }\n\n  public set headers(headers: { [key: string]: AxiosHeaderValue }) {\n    this.client.defaults.headers = headers as HeadersDefaults & {\n      [key: string]: AxiosHeaderValue;\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiProvider.html":{"url":"injectables/ApiProvider.html","title":"injectable - ApiProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/dataproviders/api.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: literal type)\n                    \n                \n                        \n                            \n                                Defined in libs/rabbitmq/src/dataproviders/api.provider.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(sessionCuid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/dataproviders/api.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionCuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/rabbitmq/src/dataproviders/api.provider.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { getClient } from './clients';\n\n@Injectable()\nexport class ApiProvider {\n  private _client;\n  constructor(params: { url?: string }) {\n    if (!params.url) {\n      throw new Error('Api url is required for DataProvider');\n    }\n    this._client = getClient({\n      baseURL: params.url,\n    });\n  }\n\n  async getSession(sessionCuid: string): Promise {\n    const { data } = await this._client.session.get(sessionCuid);\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-queue/src/app/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                app\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                emitMessage\n                            \n                            \n                                    \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        emitMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('emit')\n                \n            \n\n                    \n                        \n                            Defined in apps/nest-queue/src/app/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('send')\n                \n            \n\n                    \n                        \n                            Defined in apps/nest-queue/src/app/app.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { BENEFICIARY_QUEUE } from '../constants';\nimport { RabbitMQService } from '@rumsan/nest-rabbitmq';\n\n@Controller('app')\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private readonly rabbitMQService: RabbitMQService\n  ) {}\n\n  @Get('emit')\n  async emitMessage() {\n    const data = {\n      name: 'John Doe',\n      email: '',\n    };\n    const dataBatched = Array(10000)\n      .fill(data)\n      .map((item, index) => ({\n        name: item.name + index,\n        email: `email@${index + Math.random()}.com`,\n      }));\n    console.log('dataBatched', dataBatched);\n    await this.rabbitMQService.publishBatchToQueue(\n      BENEFICIARY_QUEUE,\n      dataBatched,\n      100\n    );\n    return 'Message emitted!';\n  }\n\n  @Get('send')\n  async sendMessage() {\n    const data = { message: 'Hello RabbitMQ!' };\n    const response = await this.rabbitMQService.publishBatchToQueue(\n      'example.rpc',\n      [data],\n      1\n    );\n    return { response };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nRabbitMQModule\n\nRabbitMQModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRabbitMQModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/nest-queue/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RabbitMQModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RabbitMQModule, WorkerModule } from '@rumsan/nest-rabbitmq';\nimport { BeneficiaryWorker } from '../workers/beneficiary/beneficiary.rabbitmq.worker';\nimport { AMQP_CONNECTION } from '../constants';\nimport { queueOptions } from '../constants';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Module({\n  imports: [\n    RabbitMQModule.register({\n      // providers: [\n      //   {\n      //     provide: ProjectContants.ELClient,\n      //     useValue: ClientProxyFactory.create({ transport: Transport.TCP }),\n      //   },\n      // ],\n      workerModuleProvider: WorkerModule.register({\n        globalDataProvider: {\n          prismaService: PrismaService,\n        },\n        workers: [\n          {\n            provide: 'BeneficiaryWorker1',\n            useClass: BeneficiaryWorker,\n          },\n          {\n            provide: 'BeneficiaryWorker2',\n            useClass: BeneficiaryWorker,\n          },\n          {\n            provide: 'BeneficiaryWorker3',\n            useClass: BeneficiaryWorker,\n          },\n        ],\n      }),\n      ampqProviderName: AMQP_CONNECTION,\n      urls: [process.env.RABBIT_MQ_URL],\n      queues: queueOptions,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-queue/src/app/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/app/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Hello API' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseWorker.html":{"url":"injectables/BaseWorker.html","title":"injectable - BaseWorker","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseWorker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/worker.base.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                batchFlushTimer\n                            \n                            \n                                    Private\n                                channel\n                            \n                            \n                                    Private\n                                dlqChannel\n                            \n                            \n                                    Private\n                                    Readonly\n                                FLUSH_INTERVAL_MS\n                            \n                            \n                                    Protected\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                queueName\n                            \n                            \n                                    Private\n                                    Static\n                                workerCount\n                            \n                            \n                                    Private\n                                    Readonly\n                                workerId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                calculateOptimalPrefetch\n                            \n                            \n                                    Private\n                                    Async\n                                ensureQueueArguments\n                            \n                            \n                                    Async\n                                initializeWorker\n                            \n                            \n                                onModuleDestroy\n                            \n                            \n                                    Private\n                                    Async\n                                processBatch\n                            \n                            \n                                    Protected\n                                    Abstract\n                                processItem\n                            \n                            \n                                    Private\n                                    Async\n                                publishToDLQ\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueUtilsService: QueueUtilsService, queueName: string, defaultBatchSize: number, acknowledgeMode: \"individual\" | \"batch\", amqpConnection: any, queueArguments)\n                    \n                \n                        \n                            \n                                Defined in libs/rabbitmq/src/worker.base.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueUtilsService\n                                                  \n                                                        \n                                                                        QueueUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultBatchSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        acknowledgeMode\n                                                  \n                                                        \n                                                                    \"individual\" | \"batch\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        amqpConnection\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueArguments\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        calculateOptimalPrefetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateOptimalPrefetch()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.base.ts:135\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureQueueArguments\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureQueueArguments()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.base.ts:144\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initializeWorker\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeWorker(channel: ConfirmChannel)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.base.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        ConfirmChannel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \nonModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.base.ts:266\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        processBatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    processBatch(batch: BatchItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.base.ts:190\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                batch\n                                            \n                                                            BatchItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        processItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    processItem(items: T | T[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.base.ts:264\n                        \n                    \n\n\n            \n                \n                        Implement this in the concrete worker class to do\nactual processing for items.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        T | T[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        publishToDLQ\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishToDLQ(item: BatchItem)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.base.ts:242\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            BatchItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        batchFlushTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeJS.Timeout | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfirmChannel\n\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dlqChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfirmChannel | undefined\n\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        FLUSH_INTERVAL_MS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5000\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(this.constructor.name)\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        workerCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        workerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/worker.base.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleDestroy } from '@nestjs/common';\nimport { ConfirmChannel } from 'amqplib';\nimport { QueueUtilsService } from './queue-utils.service';\nimport { RabbitMQModuleOptions } from './types';\n\nexport interface BatchItem {\n  data: T;\n  message: any;\n}\n\n@Injectable()\nexport abstract class BaseWorker implements OnModuleDestroy {\n  protected readonly logger = new Logger(this.constructor.name);\n  private channel: ConfirmChannel;\n  private dlqChannel: ConfirmChannel | undefined;\n  private static workerCount = 0;\n  private readonly workerId: number;\n  private readonly queueName: string;\n\n  // New properties for partial-batch flush\n  private batchFlushTimer: NodeJS.Timeout | null = null;\n  private readonly FLUSH_INTERVAL_MS = 5000; // e.g., flush every 5 seconds\n\n  constructor(\n    protected readonly queueUtilsService: QueueUtilsService,\n    queueName: string,\n    private readonly defaultBatchSize = 10,\n    private readonly acknowledgeMode: 'individual' | 'batch' = 'individual',\n    private readonly amqpConnection: any,\n    private readonly queueArguments: RabbitMQModuleOptions['queues'][0]['options']['arguments'] = {}\n  ) {\n    this.queueName = queueName;\n    BaseWorker.workerCount++;\n    this.workerId = BaseWorker.workerCount;\n    this.logger.log(\n      `${this.queueName} - Worker instance created. Worker ID: ${this.workerId}. Total workers: ${BaseWorker.workerCount}`\n    );\n  }\n\n  async initializeWorker(channel: ConfirmChannel): Promise {\n    this.channel = channel;\n    this.channel.on('close', async () => {\n      this.logger.warn(\n        `${this.queueName} - Worker ID: ${this.workerId} - Channel closed. Reinitializing...`\n      );\n    });\n\n    this.channel.on('error', (error) => {\n      this.logger.error(\n        `${this.queueName} - Worker ID: ${this.workerId} - Channel error:`,\n        error\n      );\n    });\n\n    try {\n      const prefetchCount = this.calculateOptimalPrefetch();\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Setting prefetch count to ${prefetchCount}`\n      );\n      await this.channel.prefetch(prefetchCount);\n\n      const queueArgsMatch = await this.ensureQueueArguments();\n      if (!queueArgsMatch) {\n        this.logger.error(\n          `${this.queueName} - Worker ID: ${this.workerId} - Queue arguments conflict detected.`\n        );\n        return;\n      }\n\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Queue is ready.`\n      );\n\n      // Initialize a separate channel for the DLQ\n      this.dlqChannel = await this.amqpConnection.createChannel();\n      await this.dlqChannel.assertQueue('dead_letter_queue', { durable: true });\n\n      let batch: BatchItem[] = [];\n\n      await this.channel.consume(this.queueName, async (message) => {\n        if (message) {\n          const content = JSON.parse(message.content.toString());\n          batch.push({ data: content, message });\n\n          this.logger.log(\n            `${this.queueName} - Worker ID: ${\n              this.workerId\n            } - Received message: ${JSON.stringify(content).slice(0, 100)}...`\n          );\n\n          // If the batch reaches defaultBatchSize OR we are in 'individual' mode, flush immediately\n          if (\n            batch.length >= this.defaultBatchSize ||\n            this.acknowledgeMode === 'individual'\n          ) {\n            const currentBatch = [...batch];\n            batch = [];\n            this.logger.log(\n              `${this.queueName} - Worker ID: ${this.workerId} - Processing batch of size: ${currentBatch.length}.`\n            );\n            await this.processBatch(currentBatch);\n          }\n        }\n      });\n\n      /**\n       * ONLY if we are in 'batch' mode, set up a timer to flush partial batches.\n       * If 'individual' mode, we already process each message immediately.\n       */\n      if (this.acknowledgeMode === 'batch') {\n        this.batchFlushTimer = setInterval(async () => {\n          if (batch.length > 0) {\n            // Flush the partial batch\n            const currentBatch = [...batch];\n            batch = [];\n            this.logger.log(\n              `${this.queueName} - Worker ID: ${this.workerId} - Timer flush: processing partial batch of size ${currentBatch.length}.`\n            );\n            await this.processBatch(currentBatch);\n          }\n        }, this.FLUSH_INTERVAL_MS);\n      }\n\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Worker initialized.`\n      );\n    } catch (error) {\n      this.logger.error(\n        `${this.queueName} - Worker ID: ${this.workerId} - Error initializing worker:`,\n        error\n      );\n    }\n  }\n\n  private calculateOptimalPrefetch(): number {\n    const prefetch = Math.max(\n      10,\n      Math.floor(Number(process.env['MAX_PREFETCH']) || 20)\n    );\n    this.logger.log(`Optimal prefetch count calculated: ${prefetch}`);\n    return prefetch;\n  }\n\n  private async ensureQueueArguments(): Promise {\n    try {\n      const existingArgs = this.queueArguments;\n\n      if (\n        JSON.stringify(existingArgs) !== JSON.stringify(this.queueArguments)\n      ) {\n        this.logger.error(\n          `${this.queueName} - Worker ID: ${\n            this.workerId\n          } - Queue arguments conflict: Existing=${JSON.stringify(\n            existingArgs\n          )}, Provided=${JSON.stringify(this.queueArguments)}`\n        );\n\n        if (process.env['FORCE_QUEUE_RESET'] === 'true') {\n          this.logger.warn(\n            `${this.queueName} - Worker ID: ${this.workerId} - Force resetting queue.`\n          );\n          await this.channel.deleteQueue(this.queueName);\n          await this.channel.assertQueue(this.queueName, {\n            durable: true,\n            arguments: this.queueArguments,\n          });\n          return true;\n        }\n\n        return false;\n      }\n\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Queue exists with matching arguments.`\n      );\n      return true;\n    } catch (error: any) {\n      if (error.message.includes('NOT_FOUND')) {\n        await this.channel.assertQueue(this.queueName, {\n          durable: true,\n          arguments: this.queueArguments,\n        });\n        return true;\n      }\n      throw error;\n    }\n  }\n\n  private async processBatch(batch: BatchItem[]): Promise {\n    for (const item of batch) {\n      let retryCount = 0;\n      const maxRetries = 3;\n      let success = false;\n\n      while (retryCount = maxRetries) {\n            this.logger.error(\n              `${this.queueName} - Worker ID: ${this.workerId} - Max retries reached. Moving message to DLQ.`\n            );\n            try {\n              await this.publishToDLQ(item);\n              this.channel.ack(item.message); // Acknowledge to avoid re-processing\n            } catch (dlqError) {\n              this.logger.error(\n                `${this.queueName} - Worker ID: ${this.workerId} - Failed to publish to DLQ. Message will remain unacknowledged.`,\n                dlqError\n              );\n            }\n          } else {\n            // Exponential backoff before next retry\n            await new Promise((resolve) =>\n              setTimeout(resolve, Math.pow(2, retryCount) * 1000)\n            );\n          }\n        }\n      }\n\n      if (!success && retryCount >= maxRetries) {\n        this.logger.warn(\n          `${this.queueName} - Worker ID: ${this.workerId} - Message failed after retries and DLQ attempt.`\n        );\n      }\n    }\n  }\n\n  private async publishToDLQ(item: BatchItem) {\n    try {\n      await this.dlqChannel.sendToQueue(\n        'dead_letter_queue',\n        Buffer.from(JSON.stringify(item.data))\n      );\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Message published to DLQ.`\n      );\n    } catch (error) {\n      this.logger.error(\n        `${this.queueName} - Worker ID: ${this.workerId} - Failed to publish to DLQ:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Implement this in the concrete worker class to do\n   * actual processing for items.\n   */\n  protected abstract processItem(items: T | T[]): Promise;\n\n  onModuleDestroy() {\n    BaseWorker.workerCount--;\n    this.logger.warn(\n      `${this.queueName} - Worker ID: ${this.workerId} shutting down. Remaining workers: ${BaseWorker.workerCount}`\n    );\n\n    // Clear flush timer if we set one\n    if (this.batchFlushTimer) {\n      clearInterval(this.batchFlushTimer);\n      this.batchFlushTimer = null;\n      this.logger.log(`Batch flush timer for worker ${this.workerId} cleared.`);\n    }\n\n    if (this.channel) {\n      this.channel.close();\n      this.logger.log(`Channel for worker ${this.workerId} closed.`);\n    }\n\n    if (this.dlqChannel) {\n      this.dlqChannel.close();\n      this.logger.log(`DLQ channel for worker ${this.workerId} closed.`);\n    }\n\n    if (this.amqpConnection) {\n      this.amqpConnection.close();\n      this.logger.log(`Connection for worker ${this.workerId} closed.`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BatchItem.html":{"url":"interfaces/BatchItem.html","title":"interface - BatchItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BatchItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/worker.base.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Logger, OnModuleDestroy } from '@nestjs/common';\nimport { ConfirmChannel } from 'amqplib';\nimport { QueueUtilsService } from './queue-utils.service';\nimport { RabbitMQModuleOptions } from './types';\n\nexport interface BatchItem {\n  data: T;\n  message: any;\n}\n\n@Injectable()\nexport abstract class BaseWorker implements OnModuleDestroy {\n  protected readonly logger = new Logger(this.constructor.name);\n  private channel: ConfirmChannel;\n  private dlqChannel: ConfirmChannel | undefined;\n  private static workerCount = 0;\n  private readonly workerId: number;\n  private readonly queueName: string;\n\n  // New properties for partial-batch flush\n  private batchFlushTimer: NodeJS.Timeout | null = null;\n  private readonly FLUSH_INTERVAL_MS = 5000; // e.g., flush every 5 seconds\n\n  constructor(\n    protected readonly queueUtilsService: QueueUtilsService,\n    queueName: string,\n    private readonly defaultBatchSize = 10,\n    private readonly acknowledgeMode: 'individual' | 'batch' = 'individual',\n    private readonly amqpConnection: any,\n    private readonly queueArguments: RabbitMQModuleOptions['queues'][0]['options']['arguments'] = {}\n  ) {\n    this.queueName = queueName;\n    BaseWorker.workerCount++;\n    this.workerId = BaseWorker.workerCount;\n    this.logger.log(\n      `${this.queueName} - Worker instance created. Worker ID: ${this.workerId}. Total workers: ${BaseWorker.workerCount}`\n    );\n  }\n\n  async initializeWorker(channel: ConfirmChannel): Promise {\n    this.channel = channel;\n    this.channel.on('close', async () => {\n      this.logger.warn(\n        `${this.queueName} - Worker ID: ${this.workerId} - Channel closed. Reinitializing...`\n      );\n    });\n\n    this.channel.on('error', (error) => {\n      this.logger.error(\n        `${this.queueName} - Worker ID: ${this.workerId} - Channel error:`,\n        error\n      );\n    });\n\n    try {\n      const prefetchCount = this.calculateOptimalPrefetch();\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Setting prefetch count to ${prefetchCount}`\n      );\n      await this.channel.prefetch(prefetchCount);\n\n      const queueArgsMatch = await this.ensureQueueArguments();\n      if (!queueArgsMatch) {\n        this.logger.error(\n          `${this.queueName} - Worker ID: ${this.workerId} - Queue arguments conflict detected.`\n        );\n        return;\n      }\n\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Queue is ready.`\n      );\n\n      // Initialize a separate channel for the DLQ\n      this.dlqChannel = await this.amqpConnection.createChannel();\n      await this.dlqChannel.assertQueue('dead_letter_queue', { durable: true });\n\n      let batch: BatchItem[] = [];\n\n      await this.channel.consume(this.queueName, async (message) => {\n        if (message) {\n          const content = JSON.parse(message.content.toString());\n          batch.push({ data: content, message });\n\n          this.logger.log(\n            `${this.queueName} - Worker ID: ${\n              this.workerId\n            } - Received message: ${JSON.stringify(content).slice(0, 100)}...`\n          );\n\n          // If the batch reaches defaultBatchSize OR we are in 'individual' mode, flush immediately\n          if (\n            batch.length >= this.defaultBatchSize ||\n            this.acknowledgeMode === 'individual'\n          ) {\n            const currentBatch = [...batch];\n            batch = [];\n            this.logger.log(\n              `${this.queueName} - Worker ID: ${this.workerId} - Processing batch of size: ${currentBatch.length}.`\n            );\n            await this.processBatch(currentBatch);\n          }\n        }\n      });\n\n      /**\n       * ONLY if we are in 'batch' mode, set up a timer to flush partial batches.\n       * If 'individual' mode, we already process each message immediately.\n       */\n      if (this.acknowledgeMode === 'batch') {\n        this.batchFlushTimer = setInterval(async () => {\n          if (batch.length > 0) {\n            // Flush the partial batch\n            const currentBatch = [...batch];\n            batch = [];\n            this.logger.log(\n              `${this.queueName} - Worker ID: ${this.workerId} - Timer flush: processing partial batch of size ${currentBatch.length}.`\n            );\n            await this.processBatch(currentBatch);\n          }\n        }, this.FLUSH_INTERVAL_MS);\n      }\n\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Worker initialized.`\n      );\n    } catch (error) {\n      this.logger.error(\n        `${this.queueName} - Worker ID: ${this.workerId} - Error initializing worker:`,\n        error\n      );\n    }\n  }\n\n  private calculateOptimalPrefetch(): number {\n    const prefetch = Math.max(\n      10,\n      Math.floor(Number(process.env['MAX_PREFETCH']) || 20)\n    );\n    this.logger.log(`Optimal prefetch count calculated: ${prefetch}`);\n    return prefetch;\n  }\n\n  private async ensureQueueArguments(): Promise {\n    try {\n      const existingArgs = this.queueArguments;\n\n      if (\n        JSON.stringify(existingArgs) !== JSON.stringify(this.queueArguments)\n      ) {\n        this.logger.error(\n          `${this.queueName} - Worker ID: ${\n            this.workerId\n          } - Queue arguments conflict: Existing=${JSON.stringify(\n            existingArgs\n          )}, Provided=${JSON.stringify(this.queueArguments)}`\n        );\n\n        if (process.env['FORCE_QUEUE_RESET'] === 'true') {\n          this.logger.warn(\n            `${this.queueName} - Worker ID: ${this.workerId} - Force resetting queue.`\n          );\n          await this.channel.deleteQueue(this.queueName);\n          await this.channel.assertQueue(this.queueName, {\n            durable: true,\n            arguments: this.queueArguments,\n          });\n          return true;\n        }\n\n        return false;\n      }\n\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Queue exists with matching arguments.`\n      );\n      return true;\n    } catch (error: any) {\n      if (error.message.includes('NOT_FOUND')) {\n        await this.channel.assertQueue(this.queueName, {\n          durable: true,\n          arguments: this.queueArguments,\n        });\n        return true;\n      }\n      throw error;\n    }\n  }\n\n  private async processBatch(batch: BatchItem[]): Promise {\n    for (const item of batch) {\n      let retryCount = 0;\n      const maxRetries = 3;\n      let success = false;\n\n      while (retryCount = maxRetries) {\n            this.logger.error(\n              `${this.queueName} - Worker ID: ${this.workerId} - Max retries reached. Moving message to DLQ.`\n            );\n            try {\n              await this.publishToDLQ(item);\n              this.channel.ack(item.message); // Acknowledge to avoid re-processing\n            } catch (dlqError) {\n              this.logger.error(\n                `${this.queueName} - Worker ID: ${this.workerId} - Failed to publish to DLQ. Message will remain unacknowledged.`,\n                dlqError\n              );\n            }\n          } else {\n            // Exponential backoff before next retry\n            await new Promise((resolve) =>\n              setTimeout(resolve, Math.pow(2, retryCount) * 1000)\n            );\n          }\n        }\n      }\n\n      if (!success && retryCount >= maxRetries) {\n        this.logger.warn(\n          `${this.queueName} - Worker ID: ${this.workerId} - Message failed after retries and DLQ attempt.`\n        );\n      }\n    }\n  }\n\n  private async publishToDLQ(item: BatchItem) {\n    try {\n      await this.dlqChannel.sendToQueue(\n        'dead_letter_queue',\n        Buffer.from(JSON.stringify(item.data))\n      );\n      this.logger.log(\n        `${this.queueName} - Worker ID: ${this.workerId} - Message published to DLQ.`\n      );\n    } catch (error) {\n      this.logger.error(\n        `${this.queueName} - Worker ID: ${this.workerId} - Failed to publish to DLQ:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Implement this in the concrete worker class to do\n   * actual processing for items.\n   */\n  protected abstract processItem(items: T | T[]): Promise;\n\n  onModuleDestroy() {\n    BaseWorker.workerCount--;\n    this.logger.warn(\n      `${this.queueName} - Worker ID: ${this.workerId} shutting down. Remaining workers: ${BaseWorker.workerCount}`\n    );\n\n    // Clear flush timer if we set one\n    if (this.batchFlushTimer) {\n      clearInterval(this.batchFlushTimer);\n      this.batchFlushTimer = null;\n      this.logger.log(`Batch flush timer for worker ${this.workerId} cleared.`);\n    }\n\n    if (this.channel) {\n      this.channel.close();\n      this.logger.log(`Channel for worker ${this.workerId} closed.`);\n    }\n\n    if (this.dlqChannel) {\n      this.dlqChannel.close();\n      this.logger.log(`DLQ channel for worker ${this.workerId} closed.`);\n    }\n\n    if (this.amqpConnection) {\n      this.amqpConnection.close();\n      this.logger.log(`Connection for worker ${this.workerId} closed.`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BeneficiaryApiProvider.html":{"url":"injectables/BeneficiaryApiProvider.html","title":"injectable - BeneficiaryApiProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BeneficiaryApiProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                axiosInstance\n                            \n                            \n                                getItem\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getList\n                            \n                            \n                                    Async\n                                saveItem\n                            \n                            \n                                    Async\n                                saveList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiUrl: string)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        apiUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveItem(beneficiary: Beneficiary)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                beneficiary\n                                            \n                                                        Beneficiary\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveList\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveList(beneficiaries: Beneficiary[])\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                beneficiaries\n                                            \n                                                        Beneficiary[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        axiosInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AxiosInstance\n\n                    \n                \n                    \n                        \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { Beneficiary } from '@prisma/client';\nimport { IDataProvider } from '@rumsan/nest-rabbitmq';\nimport axios, { AxiosInstance } from 'axios';\n\n@Injectable()\nexport class BeneficiaryApiProvider implements IDataProvider {\n  private readonly axiosInstance: AxiosInstance;\n\n  constructor(@Inject('API_URL') private readonly apiUrl: string) {\n    this.axiosInstance = axios.create({\n      baseURL: this.apiUrl, // Dynamically using the provided API URL\n    });\n  }\n\n  getItem: (id: string) => Promise;\n\n  async getList(): Promise {\n    const { data } = await this.axiosInstance.get('/beneficiaries');\n    return data; // Assuming the data is an array of Beneficiary objects\n  }\n\n  async saveList(beneficiaries: Beneficiary[]): Promise {\n    return await this.axiosInstance.post('/beneficiaries', beneficiaries);\n  }\n\n  async saveItem(beneficiary: Beneficiary): Promise {\n    return await this.axiosInstance.post('/beneficiaries', beneficiary);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BeneficiaryPrismaProvider.html":{"url":"injectables/BeneficiaryPrismaProvider.html","title":"injectable - BeneficiaryPrismaProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BeneficiaryPrismaProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-queue/src/workers/beneficiary/beneficiary.prisma.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getItem\n                            \n                            \n                                getList\n                            \n                            \n                                saveItem\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                saveList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveList\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveList(list: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.prisma.provider.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PRISMA_SERVICE } from '@rumsan/nest-rabbitmq';\nimport { IDataProvider } from '@rumsan/nest-rabbitmq';\nimport { PrismaService } from '../../prisma/prisma.service';\n\n@Injectable()\nexport class BeneficiaryPrismaProvider implements IDataProvider {\n  constructor(@Inject(PRISMA_SERVICE) private readonly prisma: PrismaService) {\n    console.log('PrismaProvider created', prisma);\n  }\n  getItem: (id: string) => Promise;\n  getList: () => Promise;\n  saveItem: (item: any) => Promise;\n  async saveList(list: any[]) {\n    console.log(\n      'PrismaProvider saveList',\n      JSON.stringify(this.prisma, null, 2)\n    );\n    const saved = await this.prisma.beneficiary.createMany({ data: list });\n    console.log('first', saved);\n    return saved;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BeneficiaryWorker.html":{"url":"injectables/BeneficiaryWorker.html","title":"injectable - BeneficiaryWorker","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BeneficiaryWorker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                batch\n                            \n                            \n                                    Private\n                                batchSize\n                            \n                            \n                                    Private\n                                channel\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                processing\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Private\n                                    Async\n                                processBatch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: AmqpConnectionManager, queueUtilsService: QueueUtilsService)\n                    \n                \n                        \n                            \n                                Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    AmqpConnectionManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueUtilsService\n                                                  \n                                                        \n                                                                        QueueUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        processBatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    processBatch()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        batch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        batchSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfirmChannel\n\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(BeneficiaryWorker.name)\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        processing\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Global, Inject, Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { AmqpConnectionManager, ChannelWrapper } from 'amqp-connection-manager';\nimport { ConfirmChannel } from 'amqplib';\nimport { QueueUtilsService } from './queue-utils.service';\n\n@Global()\n@Injectable()\nexport class BeneficiaryWorker implements OnModuleInit {\n  private readonly logger = new Logger(BeneficiaryWorker.name);\n  private batch: any[] = [];\n  private batchSize = 20; // Set batch size here\n  private processing = false; // State flag to track processing\n  private channel: ConfirmChannel;\n\n  constructor(\n    @Inject('AMQP_CONNECTION') private readonly connection: AmqpConnectionManager,\n    private readonly queueUtilsService: QueueUtilsService\n  ) { }\n\n  async onModuleInit() {\n    try {\n      const channelWrapper: ChannelWrapper = this.connection.createChannel({\n        json: true,\n        setup: async (channel: ConfirmChannel) => {\n          this.channel = channel;\n\n          // Set prefetch to batch size for controlling delivery rate\n          await channel.prefetch(this.batchSize);\n          this.logger.log(`Channel prefetch set to ${this.batchSize}.`);\n\n          await channel.assertQueue('beneficiary-queue', { durable: true });\n          await channel.consume('beneficiary-queue', async (message) => {\n            if (message) {\n              const data = JSON.parse(message.content.toString());\n              this.logger.log(`Received message: ${JSON.stringify(data)}`);\n              this.batch.push({ data, message });\n\n              // If batch size is met and no processing is ongoing, process the batch\n              if (this.batch.length >= this.batchSize && !this.processing) {\n                this.processing = true; // Set processing flag to true\n                await this.processBatch();\n              }\n            }\n          });\n        },\n      });\n\n      this.logger.log('Beneficiary Worker initialized.');\n    } catch (err) {\n      this.logger.error('Error initializing Beneficiary Worker:', err);\n    }\n  }\n\n  private async processBatch() {\n    const batch = this.batch.splice(0, this.batchSize); // Extract the batch\n    const dataBatch = batch.map(item => item.data);\n    const messageBatch = batch.map(item => item.message);\n\n    try {\n      this.logger.log(`Starting batch processing of ${dataBatch.length} items...`);\n\n      await this.queueUtilsService.processBatch(dataBatch, async (item) => {\n        this.logger.log(`Processing beneficiary: ${JSON.stringify(item)}`);\n        await new Promise((resolve) => setTimeout(resolve, 100)); // Simulate async processing\n        this.logger.log(`Beneficiary processed: ${JSON.stringify(item)}`);\n      });\n\n      this.logger.log('Batch processing completed.');\n\n      // Acknowledge all messages in the batch\n      messageBatch.forEach((message) => this.channel.ack(message));\n      this.logger.log('Batch acknowledged.');\n    } catch (error) {\n      this.logger.error('Error processing batch:', error);\n\n      // Requeue messages if batch processing fails\n      messageBatch.forEach((message) => this.channel.nack(message, false, true));\n      this.logger.log('Batch requeued.');\n    } finally {\n      this.processing = false; // Reset processing flag\n      if (this.batch.length > 0) {\n        // Process next batch if available\n        this.logger.log(`Remaining messages in queue: ${this.batch.length}`);\n        await this.processBatch();\n      }\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BeneficiaryWorker-1.html":{"url":"injectables/BeneficiaryWorker-1.html","title":"injectable - BeneficiaryWorker-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BeneficiaryWorker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseWorker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                channelWrapper\n                            \n                            \n                                    Private\n                                batchFlushTimer\n                            \n                            \n                                    Private\n                                channel\n                            \n                            \n                                    Private\n                                dlqChannel\n                            \n                            \n                                    Private\n                                    Readonly\n                                FLUSH_INTERVAL_MS\n                            \n                            \n                                    Protected\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                queueName\n                            \n                            \n                                    Private\n                                    Static\n                                workerCount\n                            \n                            \n                                    Private\n                                    Readonly\n                                workerId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Protected\n                                    Async\n                                processItem\n                            \n                            \n                                    Private\n                                calculateOptimalPrefetch\n                            \n                            \n                                    Private\n                                    Async\n                                ensureQueueArguments\n                            \n                            \n                                    Async\n                                initializeWorker\n                            \n                            \n                                onModuleDestroy\n                            \n                            \n                                    Private\n                                    Async\n                                processBatch\n                            \n                            \n                                    Private\n                                    Async\n                                publishToDLQ\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: AmqpConnectionManager, queueUtilsService: QueueUtilsService, prisma: PrismaService, queuesToSetup: RabbitMQModuleOptions, apiUrl: string)\n                    \n                \n                        \n                            \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    AmqpConnectionManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueUtilsService\n                                                  \n                                                        \n                                                                        QueueUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queuesToSetup\n                                                  \n                                                        \n                                                                        RabbitMQModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        processItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    processItem(batch)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseWorker\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseWorker:54\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                batch\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        calculateOptimalPrefetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateOptimalPrefetch()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseWorker\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseWorker:135\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureQueueArguments\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureQueueArguments()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseWorker\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseWorker:144\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initializeWorker\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeWorker(channel: ConfirmChannel)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseWorker\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseWorker:40\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        ConfirmChannel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \nonModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseWorker\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseWorker:266\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        processBatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    processBatch(batch: BatchItem[])\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseWorker\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseWorker:190\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                batch\n                                            \n                                                            BatchItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        publishToDLQ\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishToDLQ(item: BatchItem)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseWorker\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseWorker:242\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            BatchItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channelWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChannelWrapper\n\n                    \n                \n                    \n                        \n                                Defined in apps/nest-queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        batchFlushTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeJS.Timeout | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:21\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfirmChannel\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dlqChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfirmChannel | undefined\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        FLUSH_INTERVAL_MS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5000\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(this.constructor.name)\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        workerCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        workerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseWorker\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseWorker:17\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Global, Inject, Injectable } from '@nestjs/common';\nimport { Beneficiary } from '@prisma/client';\nimport {\n  API_URL,\n  BaseWorker,\n  getQueueByName,\n  PRISMA_SERVICE,\n  QueueUtilsService,\n  RabbitMQModuleOptions,\n} from '@rumsan/nest-rabbitmq';\nimport { AmqpConnectionManager, ChannelWrapper } from 'amqp-connection-manager';\nimport { AMQP_CONNECTION, BENEFICIARY_QUEUE } from '../../constants';\nimport { PrismaService } from '../../prisma/prisma.service';\n@Global()\n@Injectable()\nexport class BeneficiaryWorker extends BaseWorker {\n  private channelWrapper: ChannelWrapper;\n  constructor(\n    @Inject(AMQP_CONNECTION) private readonly connection: AmqpConnectionManager,\n    queueUtilsService: QueueUtilsService,\n    // private readonly prisma:PrismaService,\n    // @Inject(DATA_PROVIDER) private readonly dataProvider: IDataProvider,\n    @Inject(PRISMA_SERVICE) private readonly prisma: PrismaService,\n    @Inject('QUEUE_NAMES')\n    private readonly queuesToSetup: RabbitMQModuleOptions['queues'],\n    @Inject(API_URL) private readonly apiUrl: string\n  ) {\n    const queue = getQueueByName(queuesToSetup, BENEFICIARY_QUEUE);\n    super(\n      queueUtilsService,\n      BENEFICIARY_QUEUE,\n      10,\n      'batch',\n      connection,\n      queue.options.arguments\n    );\n  }\n\n  async onModuleInit() {\n    try {\n      this.channelWrapper = this.connection.createChannel({\n        json: true,\n        setup: async (channel) => {\n          await this.initializeWorker(channel);\n          // console.log('this.data', this.dataProvider);\n          console.log('this.apiUrl', this.apiUrl);\n        },\n      });\n    } catch (err) {\n      this.logger.error('Error initializing Beneficiary Worker:', err);\n    }\n  }\n\n  protected async processItem(batch): Promise {\n    const beneficiaries = batch.map(({ data: beneficiary }) => ({\n      name: beneficiary.name,\n      email: beneficiary.email,\n    }));\n    this.logger.log(`Processing batch: ${batch} }`);\n\n    try {\n      // await this.prisma.$transaction(async tx => {\n      //   await tx.beneficiary.createMany({ data: beneficiaries });\n      // });\n\n      //Pause a worker for 10 seconds\n      // await new Promise((resolve) => setTimeout(resolve, 1000));\n      await this.prisma.beneficiary.createMany({ data: beneficiaries });\n\n      // console.log('this.dataProvider', this.dataProvider);\n      // await this.dataProvider.saveList(beneficiaries);\n\n      this.logger.log(\n        'Batch successfully processed and saved to the database.'\n      );\n    } catch (error) {\n      this.logger.error('Error processing batch:', error);\n      throw error; // Requeue if necessary\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DataProviderModule.html":{"url":"modules/DataProviderModule.html","title":"module - DataProviderModule","body":"\n                   \n\n\n\n\n    Modules\n    DataProviderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/rabbitmq/src/dataproviders/dataprovider.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(config: literal type, forcedToken?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/dataproviders/dataprovider.module.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                forcedToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     DynamicModule\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        // src/rabbitmq/dataproviders/dataprovider.module.ts\nimport { DynamicModule, Global, Module, Provider } from '@nestjs/common';\nimport { v4 as uuid } from 'uuid';\n\nexport const API_URL = 'API_URL';\nexport const PRISMA_SERVICE = 'PRISMA_SERVICE';\nexport const DATA_PROVIDER = 'DATA_PROVIDER';\n\n@Global()\n@Module({})\nexport class DataProviderModule {\n  static register(\n    config: {\n      apiUrl?: string;\n      dataProvider?: any; // e.g., BeneficiaryApiProvider\n      prismaService?: any; // e.g., an instance\n    },\n    forcedToken?: string,\n  ): DynamicModule {\n    const uniqueToken = forcedToken || `DATA_PROVIDER_${uuid()}`;\n\n    const providers: Provider[] = [];\n\n    if (config.apiUrl) {\n      providers.push({\n        provide: API_URL,\n        useValue: config.apiUrl,\n      });\n    }\n\n    if (config.prismaService) {\n      providers.push({\n        provide: PRISMA_SERVICE,\n        useValue: config.prismaService,\n      });\n    }\n\n    if (config.dataProvider) {\n      providers.push({\n        provide: uniqueToken,\n        useClass: config.dataProvider,\n      });\n      providers.push({\n        provide: DATA_PROVIDER,\n        useExisting: uniqueToken,\n      });\n    }\n\n    return {\n      module: DataProviderModule,\n      providers,\n      exports: [\n        uniqueToken,\n        DATA_PROVIDER,\n        config.apiUrl && API_URL,\n        config.prismaService && PRISMA_SERVICE,\n      ].filter(Boolean),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GlobalDataProviderConfig.html":{"url":"interfaces/GlobalDataProviderConfig.html","title":"interface - GlobalDataProviderConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GlobalDataProviderConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/worker.module.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dataProvider\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prismaService\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataProvider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataProvider:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prismaService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prismaService:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Module, DynamicModule, ClassProvider, FactoryProvider } from '@nestjs/common';\nimport { v4 as uuid } from 'uuid';\nimport { DataProviderModule } from './dataproviders/dataprovider.module';\nimport { WorkerDefinition, WorkerClassDefinition, WorkerFactoryDefinition } from './types';\nimport { WorkerTokensModule } from './worker-tokens.module';\n\ninterface GlobalDataProviderConfig {\n  apiUrl?: string;\n  dataProvider?: any;\n  prismaService?: any;\n}\n\n@Module({})\nexport class WorkerModule {\n  static register(params: {\n    workers: WorkerDefinition[];\n    globalDataProvider?: GlobalDataProviderConfig;\n  }): DynamicModule {\n    const { workers, globalDataProvider } = params;\n\n    // 1) Possibly create a global data provider/tokens module\n    let globalModule: DynamicModule | null = null;\n    if (globalDataProvider) {\n      // If there's an actual dataProvider class, use DataProviderModule\n      if (globalDataProvider.dataProvider) {\n        const globalToken = `DATA_PROVIDER_${uuid()}`;\n        globalModule = DataProviderModule.register(\n          {\n            dataProvider: globalDataProvider.dataProvider,\n            apiUrl: globalDataProvider.apiUrl,\n            prismaService: globalDataProvider.prismaService,\n          },\n          globalToken,\n        );\n      } else if (globalDataProvider.apiUrl || globalDataProvider.prismaService) {\n        // No dataProvider, but we do have tokens\n        globalModule = WorkerTokensModule.register({\n          apiUrl: globalDataProvider.apiUrl || 'Invalid API URL',\n          prismaService: globalDataProvider.prismaService,\n        });\n      }\n    }\n\n    // 2) For each worker, do the same logic\n    const perWorkerModules: DynamicModule[] = [];\n    const workerToToken: Record = {};\n\n    workers.forEach(worker => {\n      const finalDataProvider = worker.workerDataProvider || globalDataProvider?.dataProvider;\n      const finalApiUrl = worker.apiUrl || globalDataProvider?.apiUrl;\n      const finalPrismaService = worker.prismaService || globalDataProvider?.prismaService;\n\n      if (finalDataProvider) {\n        const token = `DATA_PROVIDER_${uuid()}`;\n        workerToToken[worker.provide] = token;\n\n        const mod = DataProviderModule.register(\n          {\n            dataProvider: finalDataProvider,\n            apiUrl: finalApiUrl,\n            prismaService: finalPrismaService,\n          },\n          token,\n        );\n        perWorkerModules.push(mod);\n      } else if (finalApiUrl || finalPrismaService) {\n        // Provide a mini module that only exports API_URL / PRISMA_SERVICE\n        workerToToken[worker.provide] = null; // no data provider token\n        const mod = WorkerTokensModule.register({\n          apiUrl: finalApiUrl,\n          prismaService: finalPrismaService,\n        });\n        perWorkerModules.push(mod);\n      } else {\n        workerToToken[worker.provide] = null;\n      }\n    });\n\n    // 3) Build Worker Providers\n    const workerProviders: Array = workers.map(worker => {\n      const dataToken = workerToToken[worker.provide];\n      if ('useFactory' in worker) {\n        const w = worker as WorkerFactoryDefinition;\n        return {\n          provide: w.provide,\n          useFactory: w.useFactory,\n          inject: dataToken ? [dataToken, ...(w.inject || [])] : w.inject || [],\n        } as FactoryProvider;\n      } else {\n        const w = worker as WorkerClassDefinition;\n        return {\n          provide: w.provide,\n          useClass: w.useClass,\n        } as ClassProvider;\n      }\n    });\n\n    // 4) Return the DynamicModule\n    return {\n      module: WorkerModule,\n      imports: [...(globalModule ? [globalModule] : []), ...perWorkerModules],\n      providers: workerProviders,\n      exports: [...workerProviders, ...(globalModule ? [globalModule] : []), ...perWorkerModules],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataProvider.html":{"url":"interfaces/IDataProvider.html","title":"interface - IDataProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDataProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getItem\n                                        \n                                \n                                \n                                        \n                                            getList\n                                        \n                                \n                                \n                                        \n                                            saveItem\n                                        \n                                \n                                \n                                        \n                                            saveList\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getList:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        saveItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        saveItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        saveList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        saveList:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DynamicModule, ForwardReference, ModuleMetadata, Type } from '@nestjs/common';\nimport * as amqp from 'amqp-connection-manager';\n\nexport type RabbitMQModuleOptions = {\n  urls: string[];\n  queues: { name: string; durable: boolean; options?: amqp.Options.AssertQueue }[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n};\n\nexport interface IDataProvider {\n  // Define the structure for fetching or saving beneficiaries\n  getList: () => Promise;\n  saveList: (list: any[]) => Promise | Promise;\n  getItem: (id: string) => Promise;\n  saveItem: (item: any) => Promise;\n}\n\nexport type DataProviderConfig = {\n  apiUrl?: string;\n  usePrisma?: boolean;\n  dataProvider?: Type;\n};\n\n/**\n * A worker that uses a class provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker1')\n * - `useClass`: the actual NestJS class\n */\nexport interface WorkerClassDefinition {\n  provide: any;\n  useClass: Type; // The class to instantiate\n  // We do *not* allow 'inject' or 'useFactory' here\n  useFactory?: never;\n  inject?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * A worker that uses a factory provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker2')\n * - `useFactory`: a function returning the worker instance\n * - `inject`: an array of tokens to inject into `useFactory`\n */\nexport interface WorkerFactoryDefinition {\n  provide: any;\n  useFactory: (...args: any[]) => any;\n  inject?: any[]; // Valid for factory providers\n  // We do *not* allow `useClass` in a factory-based worker\n  useClass?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * Union type: a worker can EITHER be class-based OR factory-based.\n */\nexport type WorkerDefinition = WorkerClassDefinition | WorkerFactoryDefinition;\n\nexport interface QueueDefinition {\n  name: string;\n  durable: boolean;\n  options?: amqp.Options.AssertQueue;\n}\n\nexport interface RabbitMQRegisterOptions extends ModuleMetadata {\n  urls: string[];\n  queues: QueueDefinition[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n\n  /**\n   * The module that sets up workers\n   * (DynamicModule, Type, Promise, or ForwardReference)\n   */\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/nest-queue/src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/nest-queue/src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanDatabase\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/nest-queue/src/prisma/prisma.service.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/prisma/prisma.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/prisma/prisma.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/nest-queue/src/prisma/prisma.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async cleanDatabase() {\n    if (process.env.NODE_ENV === 'production') return;\n    // teardown logic\n    return Promise.all([this.user.deleteMany()]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueueDefinition.html":{"url":"interfaces/QueueDefinition.html","title":"interface - QueueDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueueDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            durable\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        durable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        durable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     amqp.Options.AssertQueue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     amqp.Options.AssertQueue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DynamicModule, ForwardReference, ModuleMetadata, Type } from '@nestjs/common';\nimport * as amqp from 'amqp-connection-manager';\n\nexport type RabbitMQModuleOptions = {\n  urls: string[];\n  queues: { name: string; durable: boolean; options?: amqp.Options.AssertQueue }[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n};\n\nexport interface IDataProvider {\n  // Define the structure for fetching or saving beneficiaries\n  getList: () => Promise;\n  saveList: (list: any[]) => Promise | Promise;\n  getItem: (id: string) => Promise;\n  saveItem: (item: any) => Promise;\n}\n\nexport type DataProviderConfig = {\n  apiUrl?: string;\n  usePrisma?: boolean;\n  dataProvider?: Type;\n};\n\n/**\n * A worker that uses a class provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker1')\n * - `useClass`: the actual NestJS class\n */\nexport interface WorkerClassDefinition {\n  provide: any;\n  useClass: Type; // The class to instantiate\n  // We do *not* allow 'inject' or 'useFactory' here\n  useFactory?: never;\n  inject?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * A worker that uses a factory provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker2')\n * - `useFactory`: a function returning the worker instance\n * - `inject`: an array of tokens to inject into `useFactory`\n */\nexport interface WorkerFactoryDefinition {\n  provide: any;\n  useFactory: (...args: any[]) => any;\n  inject?: any[]; // Valid for factory providers\n  // We do *not* allow `useClass` in a factory-based worker\n  useClass?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * Union type: a worker can EITHER be class-based OR factory-based.\n */\nexport type WorkerDefinition = WorkerClassDefinition | WorkerFactoryDefinition;\n\nexport interface QueueDefinition {\n  name: string;\n  durable: boolean;\n  options?: amqp.Options.AssertQueue;\n}\n\nexport interface RabbitMQRegisterOptions extends ModuleMetadata {\n  urls: string[];\n  queues: QueueDefinition[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n\n  /**\n   * The module that sets up workers\n   * (DynamicModule, Type, Promise, or ForwardReference)\n   */\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueUtilsService.html":{"url":"injectables/QueueUtilsService.html","title":"injectable - QueueUtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueUtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/queue-utils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processBatch\n                            \n                            \n                                    Async\n                                processItemsWithAck\n                            \n                            \n                                    Async\n                                requeueMessage\n                            \n                            \n                                    Async\n                                setChannelPrefetch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processBatch\n                        \n                    \n                \n            \n            \n                \n                        \n                    processBatch(items: T[], processor: (item: T) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/queue-utils.service.ts:9\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        T[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                processor\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processItemsWithAck\n                        \n                    \n                \n            \n            \n                \n                        \n                    processItemsWithAck(items: T[], processor: (item: T) => void, ack: (item: T) => void, nack?: (item?: T) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/queue-utils.service.ts:20\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        T[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                processor\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ack\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nack\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        requeueMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    requeueMessage(channel: Channel, message: any, delay: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/queue-utils.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                delay\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setChannelPrefetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    setChannelPrefetch(channel: Channel, prefetch: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/queue-utils.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                prefetch\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueUtilsService.name)\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/queue-utils.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Channel } from 'amqplib';\n\n@Injectable()\nexport class QueueUtilsService {\n  private readonly logger = new Logger(QueueUtilsService.name);\n\n  // Process items in batches with individual error handling\n  async processBatch(items: T[], processor: (item: T) => Promise): Promise {\n    for (const item of items) {\n      try {\n        await processor(item);\n      } catch (error) {\n        this.logger.error(`Error processing item: ${JSON.stringify(item)} - Error:`, error);\n      }\n    }\n  }\n\n  // Process items with manual acknowledgment and optional negative acknowledgment\n  async processItemsWithAck(\n    items: T[],\n    processor: (item: T) => Promise,\n    ack: (item: T) => void,\n    nack?: (item: T) => void,\n  ): Promise {\n    for (const item of items) {\n      try {\n        await processor(item);\n        ack(item);\n      } catch (error) {\n        this.logger.error(`Error processing item: ${JSON.stringify(item)} - Error:`, error);\n        if (nack) nack(item);\n      }\n    }\n  }\n\n  // Set channel prefetch\n  async setChannelPrefetch(channel: Channel, prefetch: number): Promise {\n    try {\n      await channel.prefetch(prefetch);\n      this.logger.log(`Channel prefetch set to ${prefetch}`);\n    } catch (error) {\n      this.logger.error(`Error setting channel prefetch:`, error);\n    }\n  }\n\n  // Handle message requeue with optional delay\n  async requeueMessage(channel: Channel, message: any, delay = 0): Promise {\n    try {\n      if (delay > 0) {\n        setTimeout(() => channel.nack(message, false, true), delay);\n      } else {\n        channel.nack(message, false, true);\n      }\n      this.logger.log(`Message requeued with delay ${delay}ms: ${JSON.stringify(message)}`);\n    } catch (error) {\n      this.logger.error(`Error during message requeueing:`, error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RabbitMQModule.html":{"url":"modules/RabbitMQModule.html","title":"module - RabbitMQModule","body":"\n                   \n\n\n\n\n    Modules\n    RabbitMQModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/rabbitmq/src/rabbitmq.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/rabbitmq.module.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/rabbitmq.module.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(options: RabbitMQRegisterOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/rabbitmq.module.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            RabbitMQRegisterOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     DynamicModule\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        // rabbitmq.module.ts\nimport { DynamicModule, ForwardReference, Global, Module, OnModuleDestroy, OnModuleInit, Type } from '@nestjs/common';\nimport * as amqp from 'amqp-connection-manager';\nimport { QueueUtilsService } from './queue-utils.service';\nimport { RabbitMQService } from './rabbitmq.service';\nimport { RabbitMQRegisterOptions } from './types';\n\n@Global()\n@Module({})\nexport class RabbitMQModule implements OnModuleInit, OnModuleDestroy {\n  static register(options: RabbitMQRegisterOptions): DynamicModule {\n    // 1) Create the AMQP provider\n    const amqpProvider = {\n      provide: options.ampqProviderName || 'AMQP_CONNECTION',\n      useFactory: () => amqp.connect(options.urls, options.connectionOptions),\n    };\n\n    // 2) Merge user-defined \"imports\" with the workerModuleProvider (if any)\n    //    This ensures we import the worker module plus anything else the user wants\n    const mergedImports = [\n      options.workerModuleProvider, // e.g. WorkerModule\n      ...(options.imports || []),\n    ].filter((module): module is DynamicModule | Type | Promise | ForwardReference => module !== undefined);\n\n    // 3) Merge user-defined controllers with our built-in controller\n    const mergedControllers = [...(options.controllers || [])];\n\n    // 4) Build the default providers\n    const defaultProviders = [\n      amqpProvider,\n      QueueUtilsService,\n      RabbitMQService,\n      {\n        provide: 'QUEUE_NAMES',\n        useValue: options.queues,\n      },\n    ];\n\n    // 5) Merge any user-supplied providers\n    const mergedProviders = [...defaultProviders, ...(options.providers || [])];\n\n    // 6) Merge our default exports with user-supplied exports\n    const defaultExports = [amqpProvider, QueueUtilsService, RabbitMQService, 'QUEUE_NAMES'];\n    const mergedExports = [...defaultExports, ...(options.exports || [])];\n\n    return {\n      module: RabbitMQModule,\n      imports: mergedImports,\n      controllers: mergedControllers,\n      providers: mergedProviders,\n      exports: mergedExports,\n    };\n  }\n\n  async onModuleInit() {\n    console.log('RabbitMQ Module initialized.');\n  }\n\n  async onModuleDestroy() {\n    console.log('RabbitMQ Module destroyed.');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RabbitMQRegisterOptions.html":{"url":"interfaces/RabbitMQRegisterOptions.html","title":"interface - RabbitMQRegisterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RabbitMQRegisterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ModuleMetadata\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            ampqProviderName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            connectionOptions\n                                        \n                                \n                                \n                                        \n                                            queues\n                                        \n                                \n                                \n                                        \n                                            urls\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            workerModuleProvider\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ampqProviderName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ampqProviderName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connectionOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connectionOptions:     amqp.AmqpConnectionManagerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     amqp.AmqpConnectionManagerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queues\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queues:         QueueDefinition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueueDefinition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        urls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        urls:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workerModuleProvider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workerModuleProvider:     DynamicModule | Type | Promise | ForwardReference\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DynamicModule | Type | Promise | ForwardReference\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The module that sets up workers\n(DynamicModule, Type, Promise, or ForwardReference)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DynamicModule, ForwardReference, ModuleMetadata, Type } from '@nestjs/common';\nimport * as amqp from 'amqp-connection-manager';\n\nexport type RabbitMQModuleOptions = {\n  urls: string[];\n  queues: { name: string; durable: boolean; options?: amqp.Options.AssertQueue }[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n};\n\nexport interface IDataProvider {\n  // Define the structure for fetching or saving beneficiaries\n  getList: () => Promise;\n  saveList: (list: any[]) => Promise | Promise;\n  getItem: (id: string) => Promise;\n  saveItem: (item: any) => Promise;\n}\n\nexport type DataProviderConfig = {\n  apiUrl?: string;\n  usePrisma?: boolean;\n  dataProvider?: Type;\n};\n\n/**\n * A worker that uses a class provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker1')\n * - `useClass`: the actual NestJS class\n */\nexport interface WorkerClassDefinition {\n  provide: any;\n  useClass: Type; // The class to instantiate\n  // We do *not* allow 'inject' or 'useFactory' here\n  useFactory?: never;\n  inject?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * A worker that uses a factory provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker2')\n * - `useFactory`: a function returning the worker instance\n * - `inject`: an array of tokens to inject into `useFactory`\n */\nexport interface WorkerFactoryDefinition {\n  provide: any;\n  useFactory: (...args: any[]) => any;\n  inject?: any[]; // Valid for factory providers\n  // We do *not* allow `useClass` in a factory-based worker\n  useClass?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * Union type: a worker can EITHER be class-based OR factory-based.\n */\nexport type WorkerDefinition = WorkerClassDefinition | WorkerFactoryDefinition;\n\nexport interface QueueDefinition {\n  name: string;\n  durable: boolean;\n  options?: amqp.Options.AssertQueue;\n}\n\nexport interface RabbitMQRegisterOptions extends ModuleMetadata {\n  urls: string[];\n  queues: QueueDefinition[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n\n  /**\n   * The module that sets up workers\n   * (DynamicModule, Type, Promise, or ForwardReference)\n   */\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RabbitMQService.html":{"url":"injectables/RabbitMQService.html","title":"injectable - RabbitMQService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RabbitMQService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/rabbitmq.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                channelWrapper\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                publishBatchToQueue\n                            \n                            \n                                    Async\n                                publishToQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: AmqpConnectionManager, queuesToSetup: any[])\n                    \n                \n                        \n                            \n                                Defined in libs/rabbitmq/src/rabbitmq.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    AmqpConnectionManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queuesToSetup\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        publishBatchToQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishBatchToQueue(queue: string, messages: any[], batchSize: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/rabbitmq.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                queue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                messages\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                batchSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        publishToQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    publishToQueue(queue: string, message: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/rabbitmq.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channelWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChannelWrapper\n\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/rabbitmq.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(RabbitMQService.name)\n                    \n                \n                    \n                        \n                                Defined in libs/rabbitmq/src/rabbitmq.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Global, Inject, Injectable, Logger } from '@nestjs/common';\nimport { AmqpConnectionManager, ChannelWrapper } from 'amqp-connection-manager';\nimport { ConfirmChannel } from 'amqplib';\n\n@Global()\n@Injectable()\nexport class RabbitMQService {\n  private readonly logger = new Logger(RabbitMQService.name);\n  private channelWrapper: ChannelWrapper;\n\n  constructor(\n    @Inject('AMQP_CONNECTION') private readonly connection: AmqpConnectionManager,\n    @Inject('QUEUE_NAMES') private readonly queuesToSetup: any[],\n  ) {\n    this.channelWrapper = this.connection.createChannel({\n      json: true,\n      setup: async (channel: ConfirmChannel) => {\n        for (const queue of this.queuesToSetup) {\n          await channel.assertQueue(queue.name, queue.options);\n          this.logger.log(`Queue ${queue.name} setup completed.`);\n        }\n        this.logger.log('RabbitMQ channel and all queues setup completed.');\n      },\n    });\n  }\n\n  // Publish a single message to a queue\n  async publishToQueue(queue: string, message: any): Promise {\n    try {\n      await this.channelWrapper.sendToQueue(queue, Buffer.from(JSON.stringify(message)));\n      this.logger.log(`Message published to queue: ${queue}`);\n    } catch (error) {\n      this.logger.error(`Failed to publish message to queue ${queue}:`, error);\n      throw error; // Rethrow to handle errors at the caller\n    }\n  }\n\n  // Publish messages in batches to a queue\n  async publishBatchToQueue(queue: string, messages: any[], batchSize = 10): Promise {\n    const queueOptions = this.queuesToSetup.find(q => q.name === queue)?.options;\n    console.log('queueOptions', queueOptions);\n    try {\n      for (let i = 0; i  {\n            await channel.assertQueue(queue, { durable: true });\n            batch.forEach(msg => {\n              channel.sendToQueue(\n                queue,\n                Buffer.from(JSON.stringify({ data: msg, batchSize, batchIndex: i })),\n                {\n                  persistent: true,\n                  ...queueOptions,\n                },\n              );\n            });\n          });\n        } catch (error) {\n          this.logger.error(`Failed to publish batch to queue ${queue}:`, error);\n        }\n      }\n    } catch (error) {\n      this.logger.error(`Failed to publish batch to queue ${queue}:`, error);\n    } finally {\n      this.logger.log(\n        `Total batch at the size of ${batchSize} published to queue ${queue}. Total messages: ${messages.length}  `,\n      );\n      this.logger.log(`Closing RabbitMQ channel for queue ${queue}`);\n      this.channelWrapper.close();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WorkerClassDefinition.html":{"url":"interfaces/WorkerClassDefinition.html","title":"interface - WorkerClassDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WorkerClassDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                A worker that uses a class provider.\n\nprovide: the token (e.g. 'BeneficiaryWorker1')\nuseClass: the actual NestJS class\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            inject\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prismaService\n                                        \n                                \n                                \n                                        \n                                            provide\n                                        \n                                \n                                \n                                        \n                                            useClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useFactory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            workerDataProvider\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prismaService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prismaService:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provide\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provide:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useClass:     Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useFactory:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workerDataProvider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workerDataProvider:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DynamicModule, ForwardReference, ModuleMetadata, Type } from '@nestjs/common';\nimport * as amqp from 'amqp-connection-manager';\n\nexport type RabbitMQModuleOptions = {\n  urls: string[];\n  queues: { name: string; durable: boolean; options?: amqp.Options.AssertQueue }[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n};\n\nexport interface IDataProvider {\n  // Define the structure for fetching or saving beneficiaries\n  getList: () => Promise;\n  saveList: (list: any[]) => Promise | Promise;\n  getItem: (id: string) => Promise;\n  saveItem: (item: any) => Promise;\n}\n\nexport type DataProviderConfig = {\n  apiUrl?: string;\n  usePrisma?: boolean;\n  dataProvider?: Type;\n};\n\n/**\n * A worker that uses a class provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker1')\n * - `useClass`: the actual NestJS class\n */\nexport interface WorkerClassDefinition {\n  provide: any;\n  useClass: Type; // The class to instantiate\n  // We do *not* allow 'inject' or 'useFactory' here\n  useFactory?: never;\n  inject?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * A worker that uses a factory provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker2')\n * - `useFactory`: a function returning the worker instance\n * - `inject`: an array of tokens to inject into `useFactory`\n */\nexport interface WorkerFactoryDefinition {\n  provide: any;\n  useFactory: (...args: any[]) => any;\n  inject?: any[]; // Valid for factory providers\n  // We do *not* allow `useClass` in a factory-based worker\n  useClass?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * Union type: a worker can EITHER be class-based OR factory-based.\n */\nexport type WorkerDefinition = WorkerClassDefinition | WorkerFactoryDefinition;\n\nexport interface QueueDefinition {\n  name: string;\n  durable: boolean;\n  options?: amqp.Options.AssertQueue;\n}\n\nexport interface RabbitMQRegisterOptions extends ModuleMetadata {\n  urls: string[];\n  queues: QueueDefinition[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n\n  /**\n   * The module that sets up workers\n   * (DynamicModule, Type, Promise, or ForwardReference)\n   */\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WorkerFactoryDefinition.html":{"url":"interfaces/WorkerFactoryDefinition.html","title":"interface - WorkerFactoryDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WorkerFactoryDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                A worker that uses a factory provider.\n\nprovide: the token (e.g. 'BeneficiaryWorker2')\nuseFactory: a function returning the worker instance\ninject: an array of tokens to inject into useFactory\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            inject\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prismaService\n                                        \n                                \n                                \n                                        \n                                            provide\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useClass\n                                        \n                                \n                                \n                                        \n                                            useFactory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            workerDataProvider\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prismaService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prismaService:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provide\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provide:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useClass:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workerDataProvider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workerDataProvider:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DynamicModule, ForwardReference, ModuleMetadata, Type } from '@nestjs/common';\nimport * as amqp from 'amqp-connection-manager';\n\nexport type RabbitMQModuleOptions = {\n  urls: string[];\n  queues: { name: string; durable: boolean; options?: amqp.Options.AssertQueue }[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n};\n\nexport interface IDataProvider {\n  // Define the structure for fetching or saving beneficiaries\n  getList: () => Promise;\n  saveList: (list: any[]) => Promise | Promise;\n  getItem: (id: string) => Promise;\n  saveItem: (item: any) => Promise;\n}\n\nexport type DataProviderConfig = {\n  apiUrl?: string;\n  usePrisma?: boolean;\n  dataProvider?: Type;\n};\n\n/**\n * A worker that uses a class provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker1')\n * - `useClass`: the actual NestJS class\n */\nexport interface WorkerClassDefinition {\n  provide: any;\n  useClass: Type; // The class to instantiate\n  // We do *not* allow 'inject' or 'useFactory' here\n  useFactory?: never;\n  inject?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * A worker that uses a factory provider.\n *\n * - `provide`: the token (e.g. 'BeneficiaryWorker2')\n * - `useFactory`: a function returning the worker instance\n * - `inject`: an array of tokens to inject into `useFactory`\n */\nexport interface WorkerFactoryDefinition {\n  provide: any;\n  useFactory: (...args: any[]) => any;\n  inject?: any[]; // Valid for factory providers\n  // We do *not* allow `useClass` in a factory-based worker\n  useClass?: never;\n\n  // Optionally specify a custom data provider for this worker\n  workerDataProvider?: any;\n  apiUrl?: string;\n  prismaService?: any;\n}\n\n/**\n * Union type: a worker can EITHER be class-based OR factory-based.\n */\nexport type WorkerDefinition = WorkerClassDefinition | WorkerFactoryDefinition;\n\nexport interface QueueDefinition {\n  name: string;\n  durable: boolean;\n  options?: amqp.Options.AssertQueue;\n}\n\nexport interface RabbitMQRegisterOptions extends ModuleMetadata {\n  urls: string[];\n  queues: QueueDefinition[];\n  connectionOptions?: amqp.AmqpConnectionManagerOptions;\n  ampqProviderName?: string;\n\n  /**\n   * The module that sets up workers\n   * (DynamicModule, Type, Promise, or ForwardReference)\n   */\n  workerModuleProvider?: DynamicModule | Type | Promise | ForwardReference;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WorkerModule.html":{"url":"modules/WorkerModule.html","title":"module - WorkerModule","body":"\n                   \n\n\n\n\n    Modules\n    WorkerModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/rabbitmq/src/worker.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker.module.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     DynamicModule\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        // src/rabbitmq/worker.module.ts\n\nimport { Module, DynamicModule, ClassProvider, FactoryProvider } from '@nestjs/common';\nimport { v4 as uuid } from 'uuid';\nimport { DataProviderModule } from './dataproviders/dataprovider.module';\nimport { WorkerDefinition, WorkerClassDefinition, WorkerFactoryDefinition } from './types';\nimport { WorkerTokensModule } from './worker-tokens.module';\n\ninterface GlobalDataProviderConfig {\n  apiUrl?: string;\n  dataProvider?: any;\n  prismaService?: any;\n}\n\n@Module({})\nexport class WorkerModule {\n  static register(params: {\n    workers: WorkerDefinition[];\n    globalDataProvider?: GlobalDataProviderConfig;\n  }): DynamicModule {\n    const { workers, globalDataProvider } = params;\n\n    // 1) Possibly create a global data provider/tokens module\n    let globalModule: DynamicModule | null = null;\n    if (globalDataProvider) {\n      // If there's an actual dataProvider class, use DataProviderModule\n      if (globalDataProvider.dataProvider) {\n        const globalToken = `DATA_PROVIDER_${uuid()}`;\n        globalModule = DataProviderModule.register(\n          {\n            dataProvider: globalDataProvider.dataProvider,\n            apiUrl: globalDataProvider.apiUrl,\n            prismaService: globalDataProvider.prismaService,\n          },\n          globalToken,\n        );\n      } else if (globalDataProvider.apiUrl || globalDataProvider.prismaService) {\n        // No dataProvider, but we do have tokens\n        globalModule = WorkerTokensModule.register({\n          apiUrl: globalDataProvider.apiUrl || 'Invalid API URL',\n          prismaService: globalDataProvider.prismaService,\n        });\n      }\n    }\n\n    // 2) For each worker, do the same logic\n    const perWorkerModules: DynamicModule[] = [];\n    const workerToToken: Record = {};\n\n    workers.forEach(worker => {\n      const finalDataProvider = worker.workerDataProvider || globalDataProvider?.dataProvider;\n      const finalApiUrl = worker.apiUrl || globalDataProvider?.apiUrl;\n      const finalPrismaService = worker.prismaService || globalDataProvider?.prismaService;\n\n      if (finalDataProvider) {\n        const token = `DATA_PROVIDER_${uuid()}`;\n        workerToToken[worker.provide] = token;\n\n        const mod = DataProviderModule.register(\n          {\n            dataProvider: finalDataProvider,\n            apiUrl: finalApiUrl,\n            prismaService: finalPrismaService,\n          },\n          token,\n        );\n        perWorkerModules.push(mod);\n      } else if (finalApiUrl || finalPrismaService) {\n        // Provide a mini module that only exports API_URL / PRISMA_SERVICE\n        workerToToken[worker.provide] = null; // no data provider token\n        const mod = WorkerTokensModule.register({\n          apiUrl: finalApiUrl,\n          prismaService: finalPrismaService,\n        });\n        perWorkerModules.push(mod);\n      } else {\n        workerToToken[worker.provide] = null;\n      }\n    });\n\n    // 3) Build Worker Providers\n    const workerProviders: Array = workers.map(worker => {\n      const dataToken = workerToToken[worker.provide];\n      if ('useFactory' in worker) {\n        const w = worker as WorkerFactoryDefinition;\n        return {\n          provide: w.provide,\n          useFactory: w.useFactory,\n          inject: dataToken ? [dataToken, ...(w.inject || [])] : w.inject || [],\n        } as FactoryProvider;\n      } else {\n        const w = worker as WorkerClassDefinition;\n        return {\n          provide: w.provide,\n          useClass: w.useClass,\n        } as ClassProvider;\n      }\n    });\n\n    // 4) Return the DynamicModule\n    return {\n      module: WorkerModule,\n      imports: [...(globalModule ? [globalModule] : []), ...perWorkerModules],\n      providers: workerProviders,\n      exports: [...workerProviders, ...(globalModule ? [globalModule] : []), ...perWorkerModules],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkerTokensModule.html":{"url":"classes/WorkerTokensModule.html","title":"class - WorkerTokensModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkerTokensModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/rabbitmq/src/worker-tokens.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(opts: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/rabbitmq/src/worker-tokens.module.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     DynamicModule\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { API_URL, PRISMA_SERVICE } from './dataproviders/dataprovider.module';\n\nexport class WorkerTokensModule {\n  static register(opts: { apiUrl?: string; prismaService?: any }): DynamicModule {\n    const providers = [];\n    const exportsTokens = [];\n\n    if (opts.apiUrl) {\n      providers.push({\n        provide: API_URL,\n        useValue: opts.apiUrl,\n      });\n      exportsTokens.push(API_URL);\n    }\n\n    if (opts.prismaService) {\n      // If it's an *instance*, do `useValue`.\n      // If it's a *class*, do `useClass`.\n      // Usually, an instance is safer:\n      providers.push({\n        provide: PRISMA_SERVICE,\n        useClass: opts.prismaService,\n      });\n      exportsTokens.push(PRISMA_SERVICE);\n    }\n\n    return {\n      module: WorkerTokensModule,\n      providers,\n      exports: exportsTokens,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        apps/nest-queue-e2e/src/support/global-setup.ts\n            \n            variable\n            __TEARDOWN_MESSAGE__\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-queue/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/nest-queue/src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        apps/nest-queue/src/constants.ts\n            \n            variable\n            AMQP_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/nest-queue/src/constants.ts\n            \n            variable\n            BENEFICIARY_QUEUE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/nest-queue/src/constants.ts\n            \n            variable\n            queueOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/nest-queue/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-queue/src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        apps/nest-queue/src/swagger.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/nest-queue/src/workers/beneficiary/beneficiary.api.provider.ts\n            \n            injectable\n            BeneficiaryApiProvider\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/nest-queue/src/workers/beneficiary/beneficiary.prisma.provider.ts\n            \n            injectable\n            BeneficiaryPrismaProvider\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/nest-queue/src/workers/beneficiary/beneficiary.rabbitmq.worker.ts\n            \n            injectable\n            BeneficiaryWorker\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/jest.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/[working]beneficiary.rabbitmq.worker.ts\n            \n            injectable\n            BeneficiaryWorker\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/dataproviders/api.provider.ts\n            \n            injectable\n            ApiProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/dataproviders/client.api.ts\n            \n            class\n            ApiClient\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/dataproviders/clients.ts\n            \n            variable\n            getClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/dataproviders/dataprovider.module.ts\n            \n            variable\n            API_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/dataproviders/dataprovider.module.ts\n            \n            variable\n            DATA_PROVIDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/dataproviders/dataprovider.module.ts\n            \n            variable\n            PRISMA_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/queue-utils.service.ts\n            \n            injectable\n            QueueUtilsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/rabbitmq.service.ts\n            \n            injectable\n            RabbitMQService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/types.ts\n            \n            interface\n            IDataProvider\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/types.ts\n            \n            interface\n            QueueDefinition\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/types.ts\n            \n            interface\n            RabbitMQRegisterOptions\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/types.ts\n            \n            interface\n            WorkerClassDefinition\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/types.ts\n            \n            interface\n            WorkerFactoryDefinition\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/types.ts\n            \n            type alias\n            DataProviderConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/types.ts\n            \n            type alias\n            RabbitMQModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/types.ts\n            \n            type alias\n            WorkerDefinition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/rabbitmq/src/utils.ts\n            \n            variable\n            getQueueByName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/worker-tokens.module.ts\n            \n            class\n            WorkerTokensModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/worker.base.ts\n            \n            injectable\n            BaseWorker\n            \n                5 %\n                (1/17)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/worker.base.ts\n            \n            interface\n            BatchItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/rabbitmq/src/worker.module.ts\n            \n            interface\n            GlobalDataProviderConfig\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.2\n        \n            @nestjs/core : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.2\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @prisma/client : ^6.1.0\n        \n            @types/amqplib : ^0.10.6\n        \n            amqp-connection-manager : ^4.1.14\n        \n            amqplib : ^0.10.5\n        \n            async-mutex : ^0.5.0\n        \n            axios : ^1.6.0\n        \n            eslint-plugin-prettier : ^5.2.1\n        \n            prisma-dbml-generator : ^0.12.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.0\n        \n            uuid : ^11.0.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            setupSwagger   (apps/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/nest-queue/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/nest-queue/src/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: INestApplication, port: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                port\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nRabbitMQ Worker Integration in NestJS\nOverview\nThis repository provides a robust integration for managing RabbitMQ workers in a NestJS application. The system handles message queues, batch processing, worker lifecycle management, and error handling in a scalable, flexible manner. The core components of this setup include dynamic worker registration, message processing in batches, and queue management using amqp-connection-manager and amqplib.\nKey Features:\n\nDynamic Worker Registration: Register multiple workers dynamically to process different RabbitMQ queues.\nBatch Processing: Process messages in batches to improve throughput and reduce overhead.\nError Handling and Acknowledgment: Ensure reliable message delivery with automatic acknowledgment and error handling.\nQueue Management: Automatically assert queues and validate their configurations.\nChannel Prefetching: Optimize resource usage by controlling how many messages the worker should prefetch at once.\n\n\nOptimizations and Design Choices\n1. Dynamic Worker Registration:\nThe system uses a dynamic registration approach to add and remove workers without modifying the core logic. This flexibility allows you to scale the application by adding workers to handle different queues as needed.\n\nCode Example:\nExample :WorkerModule.register([\n  { provide: 'BeneficiaryWorker1', useClass: BeneficiaryWorker },\n  { provide: 'BeneficiaryWorker2', useClass: BeneficiaryWorker },\n]);\nBenefit: This design allows you to add new queues or workers easily, enhancing the system's flexibility and scalability.\n\n\n2. Batch Processing:\nMessages are processed in batches, reducing the overhead associated with handling messages individually. By grouping messages, batch processing optimizes throughput and decreases the number of network operations and acknowledgments.\n\nCode Example:\nExample :const batch = messages.slice(i, i + batchSize);\nawait this.channelWrapper.addSetup(async (channel: ConfirmChannel) => {\n  await channel.assertQueue(queue, { durable: true });\n  channel.sendToQueue(queue, Buffer.from(JSON.stringify({ data: batch, batchSize, batchIndex: i })));\n});\nBenefit: Processing multiple messages together reduces network latency and improves overall performance.\n\n\n3. Error Handling and Acknowledgment:\nThe worker system ensures that if a message fails to be processed, it is requeued for retry. By using ack and nack, messages are acknowledged only when processed successfully, while failed messages can be requeued for future processing.\n\nCode Example:\nExample :this.channel.ack(item.message); // Acknowledge successful processing\nthis.channel.nack(item.message, false, true); // Requeue failed messages\nBenefit: This guarantees reliable message delivery and minimizes message loss in case of errors.\n\n\n4. Queue Argument Validation:\nThe system checks if the queue arguments match the expected configuration using ensureQueueArguments. If a conflict is detected, the queue is reset, or manual intervention is flagged.\n\nCode Example:\nExample :const existingArgs = this.queueArguments;\nif (JSON.stringify(existingArgs) !== JSON.stringify(this.queueArguments)) {\n  // Handle conflict and reset queue if necessary\n}\nBenefit: This ensures that workers always work with the correct queue configurations, reducing the chances of misbehaving queues.\n\n\n5. Channel Prefetching:\nPrefetching is implemented to limit the number of messages fetched by a worker at once, helping manage resource usage effectively.\n\nCode Example:\nExample :await this.channel.prefetch(this.defaultBatchSize); // Limit the number of messages fetched\nBenefit: Ensures workers are not overwhelmed with too many messages and helps distribute processing more evenly.\n\n\n6. Queue Setup and Initialization:\nQueues are set up only once during worker initialization, which reduces unnecessary reinitialization and ensures the worker can start processing immediately.\n\nBenefit: Reduces startup time and ensures that workers are ready to consume messages as soon as they are launched.\n\n\nFlow Diagram\nExample :  +-------------------+        +-------------------------+\n  | Worker Module     |        | RabbitMQ Service        |\n  | (Dynamic Register)|------->| (Publish/Consume Logic) |\n  +-------------------+        +-------------------------+\n            |\n            v\n  +--------------------------+\n  | Beneficiary Worker       |\n  | (Batch Processing Logic) |\n  +--------------------------+\n            |\n            v\n  +-----------------------+\n  | Queue Management      |\n  | (Setup, Acknowledgment)|\n  +-----------------------+\n            |\n            v\n  +----------------------------+\n  | Channel Prefetching        |\n  | (Efficient Resource Use)   |\n  +----------------------------+\nBaseWorker Class\nThe BaseWorker class provides an abstract base for all workers, encapsulating the common logic for interacting with RabbitMQ. It handles message consumption, batch processing, queue setup, and error handling. This design reduces code duplication and ensures that all workers follow a consistent pattern.\nKey Features of BaseWorker:\n\nQueue Initialization: Ensures queues are set up correctly with the required arguments.\nBatch Message Consumption: Consumes messages from queues in batches, improving throughput and reducing latency.\nError Handling: Acknowledges or requeues messages based on whether they were successfully processed.\nWorker Lifecycle Management: Manages initialization, message consumption, and graceful shutdown of workers.\nLogging: Provides detailed logs for monitoring and troubleshooting.\n\nCode Example:\nExample :export abstract class BaseWorker implements OnModuleDestroy {\n  protected readonly logger = new Logger(this.constructor.name);\n  private channel: ConfirmChannel;\n  private static workerCount = 0;\n  private readonly workerId: number;\n  private readonly queueName: string;\n\n  constructor(protected readonly queueUtilsService: QueueUtilsService, queueName: string, private readonly defaultBatchSize = 10, private readonly acknowledgeMode: 'individual' | 'batch' = 'individual', private readonly amqpConnection: any, private readonly queueArguments: RabbitMQModuleOptions['queues'][0]['options']['arguments'] = {}) {\n    this.queueName = queueName;\n    BaseWorker.workerCount++;\n    this.workerId = BaseWorker.workerCount;\n    this.logger.log(`${this.queueName} - Worker ID: ${this.workerId} created.`);\n  }\n\n  async initializeWorker(channel: ConfirmChannel): Promise {\n    this.channel = channel;\n    this.channel.on('close', async () => {\n      this.logger.warn(`${this.queueName} - Worker ID: ${this.workerId} - Channel closed. Reinitializing...`);\n    });\n\n    try {\n      this.logger.log(`${this.queueName} - Worker ID: ${this.workerId} - Setting prefetch to ${this.defaultBatchSize}`);\n      await this.channel.prefetch(this.defaultBatchSize);\n\n      const queueArgsMatch = await this.ensureQueueArguments();\n      if (!queueArgsMatch) return;\n\n      let batch: BatchItem[] = [];\n      await this.channel.consume(this.queueName, async (message) => {\n        if (message) {\n          const content = JSON.parse(message.content.toString());\n          batch.push({ data: content, message });\n          if (batch.length >= this.defaultBatchSize || this.acknowledgeMode === 'individual') {\n            const currentBatch = [...batch];\n            batch = [];\n            await this.processBatch(currentBatch);\n          }\n        }\n      });\n    } catch (error) {\n      this.logger.error(`${this.queueName} - Worker ID: ${this.workerId} - Error:`, error);\n    }\n  }\n\n  private async ensureQueueArguments(): Promise {\n    try {\n      const existingArgs = this.queueArguments;\n      if (JSON.stringify(existingArgs) !== JSON.stringify(this.queueArguments)) {\n        this.logger.error(`${this.queueName} - Worker ID: ${this.workerId} - Queue arguments conflict detected.`);\n        return false;\n      }\n      return true;\n    } catch (error) {\n      this.logger.error(`Error ensuring queue arguments:`, error);\n      return false;\n    }\n  }\n\n  private async processBatch(batch: BatchItem[]): Promise {\n    for (const item of batch) {\n      try {\n        await this.processItem([item.data]);\n        this.channel.ack(item.message);\n      } catch (error) {\n        this.channel.nack(item.message, false, true);\n      }\n    }\n  }\n\n  protected abstract processItem(items: T | T[]): Promise;\n\n  onModuleDestroy() {\n    BaseWorker.workerCount--;\n    this.logger.warn(`${this.queueName} - Worker ID: ${this.workerId} shutting down.`);\n  }\n}\nPros and Cons of the Methods Used\nPros:\n\nScalability: The dynamic worker registration allows the system to scale by adding or removing workers and queues without modifying the core logic.\nModular Design: BaseWorker reduces redundancy by abstracting common logic, making it easier to maintain and extend.\nFault Tolerance: Automatic error handling and message requeuing ensure reliable message delivery.\nEfficient Resource Usage: Prefetching and batch processing improve throughput and reduce network overhead.\n\nCons:\n\nComplexity: The system’s flexibility and dynamic behavior introduce complexity, particularly for developers unfamiliar with the architecture.\nMessage Duplication: If a worker crashes before acknowledging a message, it could result in message duplication unless proper deduplication is implemented.\nLimited Control over Worker Behavior: The batch processing mechanism might not be suitable for all use cases where individual message processing is required.\nHard-Coded Queue Setup: The queue setup is tightly coupled to the system, which might cause issues when needing more complex or dynamic configurations.\n\n\nConclusion\nThis RabbitMQ worker integration in NestJS provides an efficient and scalable solution for handling message queues, with robust features like batch processing, error handling, and dynamic worker registration. By leveraging the BaseWorker class, the system maintains flexibility, scalability, and ease of maintenance. However, considerations regarding complexity and potential message duplication should be made depending on the use case.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DataProviderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RabbitMQModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WorkerModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nRabbitMQModule\n\nRabbitMQModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRabbitMQModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DataProviderConfig   (libs/.../types.ts)\n                        \n                        \n                            RabbitMQModuleOptions   (libs/.../types.ts)\n                        \n                        \n                            WorkerDefinition   (libs/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/rabbitmq/src/types.ts\n    \n    \n        \n            \n                \n                    \n                    DataProviderConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RabbitMQModuleOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WorkerDefinition\n                \n            \n            \n                \n                    Union type: a worker can EITHER be class-based OR factory-based.\n\n                \n            \n            \n                \n                        WorkerClassDefinition | WorkerFactoryDefinition\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            __TEARDOWN_MESSAGE__   (apps/.../global-setup.ts)\n                        \n                        \n                            AMQP_CONNECTION   (apps/.../constants.ts)\n                        \n                        \n                            API_URL   (libs/.../dataprovider.module.ts)\n                        \n                        \n                            BENEFICIARY_QUEUE   (apps/.../constants.ts)\n                        \n                        \n                            DATA_PROVIDER   (libs/.../dataprovider.module.ts)\n                        \n                        \n                            getClient   (libs/.../clients.ts)\n                        \n                        \n                            getQueueByName   (libs/.../utils.ts)\n                        \n                        \n                            PRISMA_SERVICE   (libs/.../dataprovider.module.ts)\n                        \n                        \n                            queueOptions   (apps/.../constants.ts)\n                        \n                        \n                               (libs/.../jest.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/nest-queue-e2e/src/support/global-setup.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        __TEARDOWN_MESSAGE__\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n\n\n        \n    \n\n    apps/nest-queue/src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AMQP_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AMQP_CONNECTION'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BENEFICIARY_QUEUE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'BENEFICIARY_QUEUE'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queueOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  {\n    name: BENEFICIARY_QUEUE,\n    durable: true,\n    options: {\n      //   arguments: {\n      //     'x-max-priority': 10,\n      //     'x-message-ttl': 30000,\n      //     'x-max-length': 5000,\n      //   },\n      //   maxLength: 5000,\n      //   maxPriority: 10,\n      //   messageTtl: 30000,\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    libs/rabbitmq/src/dataproviders/dataprovider.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API_URL'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATA_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATA_PROVIDER'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRISMA_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PRISMA_SERVICE'\n                    \n                \n\n\n        \n    \n\n    libs/rabbitmq/src/dataproviders/clients.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (config: CreateAxiosDefaults) => {\n  const apiClient = new ApiClient(config);\n  return {\n    apiClient: apiClient,\n    setAppId: (appId: string) => (apiClient.appId = appId),\n    setAccessToken: (token: string) => (apiClient.accessToken = token),\n    setHeaders: (headers: { [key: string]: AxiosHeaderValue }) => (apiClient.headers = headers),\n  };\n}\n                    \n                \n\n\n        \n    \n\n    libs/rabbitmq/src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getQueueByName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (queues: RabbitMQModuleOptions['queues'], queueName: string) => {\n  return queues.find(queue => queue.name === queueName);\n}\n                    \n                \n\n\n        \n    \n\n    libs/rabbitmq/jest.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : JSON.parse(\n  readFileSync(`${__dirname}/.swcrc`, 'utf-8')\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
